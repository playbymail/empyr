// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: scs.sql

package sqlite

import (
	"context"
)

const createSC = `-- name: CreateSC :one
insert into scs (empire_id, sc_cd, sc_tech_level)
values (?1, ?2, ?3)
returning id
`

type CreateSCParams struct {
	EmpireID    int64
	ScCd        string
	ScTechLevel int64
}

// CreateSC creates a new colony and returns its ID.
func (q *Queries) CreateSC(ctx context.Context, arg CreateSCParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSC, arg.EmpireID, arg.ScCd, arg.ScTechLevel)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSCGroup = `-- name: CreateSCGroup :exec
insert into sc_group (sc_id, kind, effdt, enddt)
values (?1, ?2, ?3, ?4)
`

type CreateSCGroupParams struct {
	ScID  int64
	Kind  string
	Effdt int64
	Enddt int64
}

// CreateSCGroup creates a new ship or colony production group.
func (q *Queries) CreateSCGroup(ctx context.Context, arg CreateSCGroupParams) error {
	_, err := q.db.ExecContext(ctx, createSCGroup,
		arg.ScID,
		arg.Kind,
		arg.Effdt,
		arg.Enddt,
	)
	return err
}

const createSCGroupNo = `-- name: CreateSCGroupNo :exec
insert into sc_group_no (group_id, effdt, enddt, group_no)
values (?1, ?2, ?3, ?4)
`

type CreateSCGroupNoParams struct {
	GroupID int64
	Effdt   int64
	Enddt   int64
	GroupNo int64
}

// CreateSCGroupNo creates a new ship or colony production group number.
// The number must be between 1 and 35 (or 1 and 40 for deposits). The
// caller must ensure that the number is distinct for the group and the
// date range.
func (q *Queries) CreateSCGroupNo(ctx context.Context, arg CreateSCGroupNoParams) error {
	_, err := q.db.ExecContext(ctx, createSCGroupNo,
		arg.GroupID,
		arg.Effdt,
		arg.Enddt,
		arg.GroupNo,
	)
	return err
}

const createSCGroupProductionSummary = `-- name: CreateSCGroupProductionSummary :exec
insert into sc_group_production_summary (group_id, production_dt,
                                         fuel_consumed, gold_consumed, mets_consumed, nmts_consumed,
                                         pro_consumed, usk_consumed, aut_consumed,
                                         qty_produced)
values (?1, ?2,
        ?3, ?4, ?5, ?6,
        ?7, ?8, ?9,
        ?10)
`

type CreateSCGroupProductionSummaryParams struct {
	GroupID      int64
	ProductionDt int64
	FuelConsumed int64
	GoldConsumed int64
	MetsConsumed int64
	NmtsConsumed int64
	ProConsumed  int64
	UskConsumed  int64
	AutConsumed  int64
	QtyProduced  int64
}

// CreateSCGroupProductionSummary stores the totals from the entire group for a single turn.
func (q *Queries) CreateSCGroupProductionSummary(ctx context.Context, arg CreateSCGroupProductionSummaryParams) error {
	_, err := q.db.ExecContext(ctx, createSCGroupProductionSummary,
		arg.GroupID,
		arg.ProductionDt,
		arg.FuelConsumed,
		arg.GoldConsumed,
		arg.MetsConsumed,
		arg.NmtsConsumed,
		arg.ProConsumed,
		arg.UskConsumed,
		arg.AutConsumed,
		arg.QtyProduced,
	)
	return err
}

const createSCGroupProductionWIPSummary = `-- name: CreateSCGroupProductionWIPSummary :exec
insert into sc_group_production_wip_summary (group_id, production_dt,
                                             wip_25pct_qty, wip_50pct_qty, wip_75pct_qty)
values (?1, ?2,
        ?3, ?4, ?5)
`

type CreateSCGroupProductionWIPSummaryParams struct {
	GroupID      int64
	ProductionDt int64
	Wip25pctQty  int64
	Wip50pctQty  int64
	Wip75pctQty  int64
}

// CreateSCGroupProductionWIPSummary stores the total WIP from the entire group for a single turn.
func (q *Queries) CreateSCGroupProductionWIPSummary(ctx context.Context, arg CreateSCGroupProductionWIPSummaryParams) error {
	_, err := q.db.ExecContext(ctx, createSCGroupProductionWIPSummary,
		arg.GroupID,
		arg.ProductionDt,
		arg.Wip25pctQty,
		arg.Wip50pctQty,
		arg.Wip75pctQty,
	)
	return err
}

const createSCGroupTooling = `-- name: CreateSCGroupTooling :exec
insert into sc_group_tooling (group_id, effdt, enddt, item_cd, item_tech_level, retooled)
values (?1, ?2, ?3, ?4, ?5, ?6)
`

type CreateSCGroupToolingParams struct {
	GroupID       int64
	Effdt         int64
	Enddt         int64
	ItemCd        string
	ItemTechLevel int64
	Retooled      int64
}

// CreateSCGroupTooling creates a record to change the tooling of a factory
// group. If the retooled flag is set, the factories will stop producing
// new items for a few turns.
func (q *Queries) CreateSCGroupTooling(ctx context.Context, arg CreateSCGroupToolingParams) error {
	_, err := q.db.ExecContext(ctx, createSCGroupTooling,
		arg.GroupID,
		arg.Effdt,
		arg.Enddt,
		arg.ItemCd,
		arg.ItemTechLevel,
		arg.Retooled,
	)
	return err
}

const createSCGroupUnit = `-- name: CreateSCGroupUnit :exec
insert into sc_group_unit (group_id, tech_level, effdt, enddt, nbr_of_units)
values (?1, ?2, ?3, ?4, ?5)
`

type CreateSCGroupUnitParams struct {
	GroupID    int64
	TechLevel  int64
	Effdt      int64
	Enddt      int64
	NbrOfUnits int64
}

// CreateSCGroupUnit creates a new set of units for the group. All the units
// in a group must have the same technology level. Use this to create a new
// set of units or change the number of units.
func (q *Queries) CreateSCGroupUnit(ctx context.Context, arg CreateSCGroupUnitParams) error {
	_, err := q.db.ExecContext(ctx, createSCGroupUnit,
		arg.GroupID,
		arg.TechLevel,
		arg.Effdt,
		arg.Enddt,
		arg.NbrOfUnits,
	)
	return err
}

const createSCGroupUnitProduction = `-- name: CreateSCGroupUnitProduction :exec
insert into sc_group_unit_production (group_id, tech_level, production_dt,
                                      fuel_consumed, gold_consumed, mets_consumed, nmts_consumed,
                                      pro_consumed, usk_consumed, aut_consumed,
                                      qty_produced)
values (?1, ?2, ?3,
        ?4, ?5, ?6, ?7,
        ?8, ?9, ?10,
        ?11)
`

type CreateSCGroupUnitProductionParams struct {
	GroupID      int64
	TechLevel    int64
	ProductionDt int64
	FuelConsumed int64
	GoldConsumed int64
	MetsConsumed int64
	NmtsConsumed int64
	ProConsumed  int64
	UskConsumed  int64
	AutConsumed  int64
	QtyProduced  int64
}

// CreateSCGroupUnitProduction creates a record of the resources consumed
// and created by the units in a single turn.
func (q *Queries) CreateSCGroupUnitProduction(ctx context.Context, arg CreateSCGroupUnitProductionParams) error {
	_, err := q.db.ExecContext(ctx, createSCGroupUnitProduction,
		arg.GroupID,
		arg.TechLevel,
		arg.ProductionDt,
		arg.FuelConsumed,
		arg.GoldConsumed,
		arg.MetsConsumed,
		arg.NmtsConsumed,
		arg.ProConsumed,
		arg.UskConsumed,
		arg.AutConsumed,
		arg.QtyProduced,
	)
	return err
}

const createSCGroupUnitProductionWIP = `-- name: CreateSCGroupUnitProductionWIP :exec
insert into sc_group_unit_production_wip (group_id, tech_level, production_dt,
                                          wip_25pct_qty, wip_50pct_qty, wip_75pct_qty)
values (?1, ?2, ?3,
        ?4, ?5, ?6)
`

type CreateSCGroupUnitProductionWIPParams struct {
	GroupID      int64
	TechLevel    int64
	ProductionDt int64
	Wip25pctQty  int64
	Wip50pctQty  int64
	Wip75pctQty  int64
}

// CreateSCGroupUnitProductionWIP creates a record of the work in progress for a group
// of factory units in a single turn.
func (q *Queries) CreateSCGroupUnitProductionWIP(ctx context.Context, arg CreateSCGroupUnitProductionWIPParams) error {
	_, err := q.db.ExecContext(ctx, createSCGroupUnitProductionWIP,
		arg.GroupID,
		arg.TechLevel,
		arg.ProductionDt,
		arg.Wip25pctQty,
		arg.Wip50pctQty,
		arg.Wip75pctQty,
	)
	return err
}

const createSCInventory = `-- name: CreateSCInventory :exec
insert into sc_inventory (sc_id, unit_cd, unit_tech_level, effdt, enddt, qty, mass, volume, is_assembled, is_stored)
values (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10)
`

type CreateSCInventoryParams struct {
	ScID          int64
	UnitCd        string
	UnitTechLevel int64
	Effdt         int64
	Enddt         int64
	Qty           int64
	Mass          float64
	Volume        float64
	IsAssembled   int64
	IsStored      int64
}

// CreateSCInventory creates a new colony inventory entry.
func (q *Queries) CreateSCInventory(ctx context.Context, arg CreateSCInventoryParams) error {
	_, err := q.db.ExecContext(ctx, createSCInventory,
		arg.ScID,
		arg.UnitCd,
		arg.UnitTechLevel,
		arg.Effdt,
		arg.Enddt,
		arg.Qty,
		arg.Mass,
		arg.Volume,
		arg.IsAssembled,
		arg.IsStored,
	)
	return err
}

const createSCLocation = `-- name: CreateSCLocation :exec
insert into sc_location (sc_id, effdt, enddt, orbit_id, is_on_surface)
values (?1, ?2, ?3, ?4, ?5)
`

type CreateSCLocationParams struct {
	ScID        int64
	Effdt       int64
	Enddt       int64
	OrbitID     int64
	IsOnSurface int64
}

// CreateSCLocation creates a new colony location entry.
func (q *Queries) CreateSCLocation(ctx context.Context, arg CreateSCLocationParams) error {
	_, err := q.db.ExecContext(ctx, createSCLocation,
		arg.ScID,
		arg.Effdt,
		arg.Enddt,
		arg.OrbitID,
		arg.IsOnSurface,
	)
	return err
}

const createSCMiningSummary = `-- name: CreateSCMiningSummary :exec
insert into sc_mining_summary (sc_id, production_dt,
                               fuel_produced, gold_produced, mets_produced, nmts_produced)
values (?1, ?2,
        ?3, ?4, ?5, ?6)
`

type CreateSCMiningSummaryParams struct {
	ScID         int64
	GroupNo      int64
	FuelProduced int64
	GoldProduced int64
	MetsProduced int64
	NmtsProduced int64
}

// CreateSCMiningSummary creates a summary of resources mined by a colony in a single turn.
func (q *Queries) CreateSCMiningSummary(ctx context.Context, arg CreateSCMiningSummaryParams) error {
	_, err := q.db.ExecContext(ctx, createSCMiningSummary,
		arg.ScID,
		arg.GroupNo,
		arg.FuelProduced,
		arg.GoldProduced,
		arg.MetsProduced,
		arg.NmtsProduced,
	)
	return err
}

const createSCName = `-- name: CreateSCName :exec
insert into sc_name (sc_id, name, effdt, enddt)
values (?1, ?2, ?3, ?4)
`

type CreateSCNameParams struct {
	ScID  int64
	Name  string
	Effdt int64
	Enddt int64
}

// CreateSCName creates a new colony name entry.
func (q *Queries) CreateSCName(ctx context.Context, arg CreateSCNameParams) error {
	_, err := q.db.ExecContext(ctx, createSCName,
		arg.ScID,
		arg.Name,
		arg.Effdt,
		arg.Enddt,
	)
	return err
}

const createSCPopulation = `-- name: CreateSCPopulation :exec
insert into sc_population (sc_id, population_cd, effdt, enddt, qty, pay_rate, rebel_qty)
values (?1, ?2, ?3, ?4, ?5, ?6, ?7)
`

type CreateSCPopulationParams struct {
	ScID         int64
	PopulationCd string
	Effdt        int64
	Enddt        int64
	Qty          int64
	PayRate      float64
	RebelQty     int64
}

// CreateSCPopulation creates a new colony population entry.
func (q *Queries) CreateSCPopulation(ctx context.Context, arg CreateSCPopulationParams) error {
	_, err := q.db.ExecContext(ctx, createSCPopulation,
		arg.ScID,
		arg.PopulationCd,
		arg.Effdt,
		arg.Enddt,
		arg.Qty,
		arg.PayRate,
		arg.RebelQty,
	)
	return err
}

const createSCProbeOrder = `-- name: CreateSCProbeOrder :one
insert into sc_probe_order (sc_id, effdt, target_id, kind)
values (?1, ?2, ?3, ?4)
returning id
`

type CreateSCProbeOrderParams struct {
	ScID     int64
	Effdt    int64
	TargetID int64
	Kind     string
}

// CreateSCProbeOrder creates a new colony probe order.
func (q *Queries) CreateSCProbeOrder(ctx context.Context, arg CreateSCProbeOrderParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSCProbeOrder,
		arg.ScID,
		arg.Effdt,
		arg.TargetID,
		arg.Kind,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSCProbeStarOrbitResults = `-- name: CreateSCProbeStarOrbitResults :exec
insert into sc_probe_star_orbit_result(probe_id, effdt,
                                       star_id,
                                       orbit_no, orbit_kind,
                                       fuel_est, gold_est, mets_est, nmts_est)
values (?1, ?2,
        ?3,
        ?4, ?5,
        ?6, ?7, ?8, ?9)
`

type CreateSCProbeStarOrbitResultsParams struct {
	ProbeID   int64
	Effdt     int64
	StarID    int64
	OrbitNo   int64
	OrbitKind string
	FuelEst   int64
	GoldEst   int64
	MetsEst   int64
	NmtsEst   int64
}

// CreateSCProbeStarOrbitResults adds a new result.
func (q *Queries) CreateSCProbeStarOrbitResults(ctx context.Context, arg CreateSCProbeStarOrbitResultsParams) error {
	_, err := q.db.ExecContext(ctx, createSCProbeStarOrbitResults,
		arg.ProbeID,
		arg.Effdt,
		arg.StarID,
		arg.OrbitNo,
		arg.OrbitKind,
		arg.FuelEst,
		arg.GoldEst,
		arg.MetsEst,
		arg.NmtsEst,
	)
	return err
}

const createSCProbeStarResults = `-- name: CreateSCProbeStarResults :exec
insert into sc_probe_star_result(probe_id, effdt, star_id, location, nbr_of_orbits)
values (?1, ?2, ?3, ?4, ?5)
`

type CreateSCProbeStarResultsParams struct {
	ProbeID     int64
	Effdt       int64
	StarID      int64
	Location    string
	NbrOfOrbits int64
}

// CreateSCProbeStarResults adds a new result.
func (q *Queries) CreateSCProbeStarResults(ctx context.Context, arg CreateSCProbeStarResultsParams) error {
	_, err := q.db.ExecContext(ctx, createSCProbeStarResults,
		arg.ProbeID,
		arg.Effdt,
		arg.StarID,
		arg.Location,
		arg.NbrOfOrbits,
	)
	return err
}

const createSCRates = `-- name: CreateSCRates :exec
insert into sc_rates (sc_id, effdt, enddt, rations, sol, birth_rate, death_rate)
values (?1, ?2, ?3, ?4, ?5, ?6, ?7)
`

type CreateSCRatesParams struct {
	ScID      int64
	Effdt     int64
	Enddt     int64
	Rations   float64
	Sol       float64
	BirthRate float64
	DeathRate float64
}

// CreateSCRates creates a new colony.
func (q *Queries) CreateSCRates(ctx context.Context, arg CreateSCRatesParams) error {
	_, err := q.db.ExecContext(ctx, createSCRates,
		arg.ScID,
		arg.Effdt,
		arg.Enddt,
		arg.Rations,
		arg.Sol,
		arg.BirthRate,
		arg.DeathRate,
	)
	return err
}

const createSCSurveyOrbitResult = `-- name: CreateSCSurveyOrbitResult :exec
insert into sc_survey_orbit_result (survey_id, effdt, orbit_id, location, orbit_no, habitability_no, farmland_in_use,
                                    population)
values (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)
`

type CreateSCSurveyOrbitResultParams struct {
	SurveyID       int64
	Effdt          int64
	OrbitID        int64
	Location       string
	OrbitNo        int64
	HabitabilityNo int64
	FarmlandInUse  int64
	Population     int64
}

// CreateSCSurveyOrbitResult adds a new result.
func (q *Queries) CreateSCSurveyOrbitResult(ctx context.Context, arg CreateSCSurveyOrbitResultParams) error {
	_, err := q.db.ExecContext(ctx, createSCSurveyOrbitResult,
		arg.SurveyID,
		arg.Effdt,
		arg.OrbitID,
		arg.Location,
		arg.OrbitNo,
		arg.HabitabilityNo,
		arg.FarmlandInUse,
		arg.Population,
	)
	return err
}

const createSCSurveyOrder = `-- name: CreateSCSurveyOrder :one
insert into sc_survey_order (sc_id, effdt, target_id, kind)
values (?1, ?2, ?3, ?4)
returning id
`

type CreateSCSurveyOrderParams struct {
	ScID     int64
	Effdt    int64
	TargetID int64
	Kind     string
}

// CreateSCSurveyOrder creates a new colony survey order.
func (q *Queries) CreateSCSurveyOrder(ctx context.Context, arg CreateSCSurveyOrderParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSCSurveyOrder,
		arg.ScID,
		arg.Effdt,
		arg.TargetID,
		arg.Kind,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteSCProbeStarOrbitResult = `-- name: DeleteSCProbeStarOrbitResult :exec
delete
from sc_probe_star_orbit_result
where probe_id = ?1
`

// DeleteSCProbeStarOrbitResults deletes the results of a probe.
func (q *Queries) DeleteSCProbeStarOrbitResult(ctx context.Context, probeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSCProbeStarOrbitResult, probeID)
	return err
}

const deleteSCProbeStarOrbitResultsByTurn = `-- name: DeleteSCProbeStarOrbitResultsByTurn :exec
delete
from sc_probe_star_orbit_result
where effdt = ?1
`

// DeleteSCProbeStarOrbitResultsByTurn deletes the results of all probes for a given turn.
func (q *Queries) DeleteSCProbeStarOrbitResultsByTurn(ctx context.Context, effdt int64) error {
	_, err := q.db.ExecContext(ctx, deleteSCProbeStarOrbitResultsByTurn, effdt)
	return err
}

const deleteSCProbeStarResult = `-- name: DeleteSCProbeStarResult :exec
delete
from sc_probe_star_result
where probe_id = ?1
`

// DeleteSCProbeStarResult deletes the results of a probe.
func (q *Queries) DeleteSCProbeStarResult(ctx context.Context, probeID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSCProbeStarResult, probeID)
	return err
}

const deleteSCProbeStarResultsByTurn = `-- name: DeleteSCProbeStarResultsByTurn :exec
delete
from sc_probe_star_result
where effdt = ?1
`

// DeleteSCProbeStarResultsByTurn deletes the results of all probes for a given turn.
func (q *Queries) DeleteSCProbeStarResultsByTurn(ctx context.Context, effdt int64) error {
	_, err := q.db.ExecContext(ctx, deleteSCProbeStarResultsByTurn, effdt)
	return err
}

const deleteSCSurveyOrbitResult = `-- name: DeleteSCSurveyOrbitResult :exec
delete
from sc_survey_orbit_result
where survey_id = ?1
`

// DeleteSCSurveyOrbitResult deletes the results of a survey.
func (q *Queries) DeleteSCSurveyOrbitResult(ctx context.Context, surveyID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSCSurveyOrbitResult, surveyID)
	return err
}

const deleteSCSurveyOrbitResultsByTurn = `-- name: DeleteSCSurveyOrbitResultsByTurn :exec
delete
from sc_survey_orbit_result
where effdt = ?1
`

// DeleteSCSurveyOrbitResultsByTurn deletes the results of all surveys for a given turn.
func (q *Queries) DeleteSCSurveyOrbitResultsByTurn(ctx context.Context, effdt int64) error {
	_, err := q.db.ExecContext(ctx, deleteSCSurveyOrbitResultsByTurn, effdt)
	return err
}

const readAllColoniesByEmpire = `-- name: ReadAllColoniesByEmpire :many
select scs.id        as sc_id,
       systems.id    as system_id,
       systems.system_name,
       stars.id      as star_id,
       stars.star_name,
       orbits.orbit_no,
       sc_codes.name as sc_kind,
       scs.sc_tech_level,
       sc_name.name,
       sc_rates.rations,
       sc_rates.birth_rate,
       sc_rates.death_rate,
       sc_rates.sol
from scs,
     sc_codes,
     sc_name,
     sc_rates,
     sc_location,
     orbits,
     stars,
     systems
where scs.empire_id = ?1
  and scs.sc_cd in ('COPN', 'CENC', 'CORB')
  and sc_codes.code = scs.sc_cd
  and sc_name.sc_id = scs.id
  and (sc_name.effdt <= ?2 and ?2 < sc_name.enddt)
  and sc_rates.sc_id = scs.id
  and (sc_rates.effdt <= ?2 and ?2 < sc_rates.enddt)
  and sc_location.sc_id = scs.id
  and (sc_location.effdt <= ?2 and ?2 < sc_location.enddt)
  and orbits.id = sc_location.orbit_id
  and stars.id = orbits.star_id
  and systems.id = orbits.system_id
order by scs.id
`

type ReadAllColoniesByEmpireParams struct {
	EmpireID int64
	AsOfDt   int64
}

type ReadAllColoniesByEmpireRow struct {
	ScID        int64
	SystemID    int64
	SystemName  string
	StarID      int64
	StarName    string
	OrbitNo     int64
	ScKind      string
	ScTechLevel int64
	Name        string
	Rations     float64
	BirthRate   float64
	DeathRate   float64
	Sol         float64
}

// ReadAllColoniesByEmpire returns a list of all colonies for an empire
// that were active on a given turn.
func (q *Queries) ReadAllColoniesByEmpire(ctx context.Context, arg ReadAllColoniesByEmpireParams) ([]ReadAllColoniesByEmpireRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllColoniesByEmpire, arg.EmpireID, arg.AsOfDt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllColoniesByEmpireRow
	for rows.Next() {
		var i ReadAllColoniesByEmpireRow
		if err := rows.Scan(
			&i.ScID,
			&i.SystemID,
			&i.SystemName,
			&i.StarID,
			&i.StarName,
			&i.OrbitNo,
			&i.ScKind,
			&i.ScTechLevel,
			&i.Name,
			&i.Rations,
			&i.BirthRate,
			&i.DeathRate,
			&i.Sol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAllSurveyOrdersByTurn = `-- name: ReadAllSurveyOrdersByTurn :many
select empire.id as empire_id,
       sc_survey_order.sc_id,
       sc_survey_order.effdt,
       sc_survey_order.target_id
from sc_survey_order,
     scs,
     empire
where sc_survey_order.effdt = ?1
  and scs.id = sc_survey_order.sc_id
  and empire.id = scs.empire_id
order by empire.id, sc_survey_order.sc_id, sc_survey_order.effdt, sc_survey_order.target_id
`

type ReadAllSurveyOrdersByTurnRow struct {
	EmpireID int64
	ScID     int64
	Effdt    int64
	TargetID int64
}

// ReadAllSurveyOrdersByTurn returns a list of survey orders issued in a given turn of a game.
func (q *Queries) ReadAllSurveyOrdersByTurn(ctx context.Context, asOfDt int64) ([]ReadAllSurveyOrdersByTurnRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllSurveyOrdersByTurn, asOfDt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllSurveyOrdersByTurnRow
	for rows.Next() {
		var i ReadAllSurveyOrdersByTurnRow
		if err := rows.Scan(
			&i.EmpireID,
			&i.ScID,
			&i.Effdt,
			&i.TargetID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCGroupTooling = `-- name: ReadSCGroupTooling :many
select sc_group.id as group_id,
       sc_group_no.group_no,
       sc_group_tooling.item_cd,
       sc_group_tooling.item_tech_level,
       sc_group_tooling.retooled
from scs,
     sc_group,
     sc_group_no,
     sc_group_tooling
where scs.id = ?1
  and sc_group.sc_id = scs.id
  and sc_group.kind = 'factory'
  and (sc_group.effdt <= ?2 and ?2 < sc_group.enddt)
  and sc_group_no.group_id = sc_group.id
  and (sc_group_no.effdt <= ?2 and ?2 < sc_group_no.enddt)
  and sc_group_tooling.group_id = sc_group.id
  and (sc_group_tooling.effdt <= ?2 and ?2 < sc_group_tooling.enddt)
order by sc_group_no.group_no
`

type ReadSCGroupToolingParams struct {
	ScID   int64
	AsOfDt int64
}

type ReadSCGroupToolingRow struct {
	GroupID       int64
	GroupNo       int64
	ItemCd        string
	ItemTechLevel int64
	Retooled      int64
}

// ReadSCGroupTooling returns a list of the factory groups for a given colony.
func (q *Queries) ReadSCGroupTooling(ctx context.Context, arg ReadSCGroupToolingParams) ([]ReadSCGroupToolingRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCGroupTooling, arg.ScID, arg.AsOfDt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCGroupToolingRow
	for rows.Next() {
		var i ReadSCGroupToolingRow
		if err := rows.Scan(
			&i.GroupID,
			&i.GroupNo,
			&i.ItemCd,
			&i.ItemTechLevel,
			&i.Retooled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCGroupUnits = `-- name: ReadSCGroupUnits :many
select sc_group_unit.tech_level,
       nbr_of_units
from sc_group,
     sc_group_unit
where sc_group.sc_id = ?1
  and sc_group.kind = ?2
  and (sc_group.effdt <= ?3 and ?3 < sc_group.enddt)
  and sc_group_unit.group_id = sc_group.id
  and (sc_group_unit.effdt <= ?3 and ?3 < sc_group_unit.enddt)
order by sc_group_unit.tech_level, nbr_of_units
`

type ReadSCGroupUnitsParams struct {
	ScID   int64
	Kind   string
	AsOfDt int64
}

type ReadSCGroupUnitsRow struct {
	TechLevel  int64
	NbrOfUnits int64
}

// ReadSCGroupUnits returns a list of the group units for a colony.
func (q *Queries) ReadSCGroupUnits(ctx context.Context, arg ReadSCGroupUnitsParams) ([]ReadSCGroupUnitsRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCGroupUnits, arg.ScID, arg.Kind, arg.AsOfDt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCGroupUnitsRow
	for rows.Next() {
		var i ReadSCGroupUnitsRow
		if err := rows.Scan(&i.TechLevel, &i.NbrOfUnits); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCGroups = `-- name: ReadSCGroups :many
select sc_group.id as group_id,
       sc_group_no.group_no
from scs,
     sc_group,
     sc_group_no
where scs.id = ?1
  and sc_group.sc_id = scs.id
  and sc_group.kind = ?2
  and (sc_group.effdt <= ?3 and ?3 < sc_group.enddt)
  and sc_group_no.group_id = sc_group.id
  and (sc_group_no.effdt <= ?3 and ?3 < sc_group_no.enddt)
order by sc_group_no.group_no
`

type ReadSCGroupsParams struct {
	ScID   int64
	Kind   string
	AsOfDt int64
}

type ReadSCGroupsRow struct {
	GroupID int64
	GroupNo int64
}

// ReadSCGroups returns a list of the groups for a given ship or colony.
func (q *Queries) ReadSCGroups(ctx context.Context, arg ReadSCGroupsParams) ([]ReadSCGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCGroups, arg.ScID, arg.Kind, arg.AsOfDt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCGroupsRow
	for rows.Next() {
		var i ReadSCGroupsRow
		if err := rows.Scan(&i.GroupID, &i.GroupNo); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCInventory = `-- name: ReadSCInventory :many
select sc_inventory.unit_cd,
       sc_inventory.unit_tech_level,
       unit_codes.name as unit_kind,
       sc_inventory.qty,
       sc_inventory.mass,
       sc_inventory.volume,
       sc_inventory.is_assembled,
       sc_inventory.is_stored
from sc_inventory,
     unit_codes
where sc_inventory.sc_id = ?1
  and (sc_inventory.effdt <= ?2 and ?2 < sc_inventory.enddt)
  and unit_codes.code = sc_inventory.unit_cd
order by sc_inventory.unit_cd, sc_inventory.unit_tech_level, sc_inventory.qty
`

type ReadSCInventoryParams struct {
	ScID   int64
	AsOfDt int64
}

type ReadSCInventoryRow struct {
	UnitCd        string
	UnitTechLevel int64
	UnitKind      string
	Qty           int64
	Mass          float64
	Volume        float64
	IsAssembled   int64
	IsStored      int64
}

// ReadSCInventory returns a list of the inventory for a given colony.
func (q *Queries) ReadSCInventory(ctx context.Context, arg ReadSCInventoryParams) ([]ReadSCInventoryRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCInventory, arg.ScID, arg.AsOfDt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCInventoryRow
	for rows.Next() {
		var i ReadSCInventoryRow
		if err := rows.Scan(
			&i.UnitCd,
			&i.UnitTechLevel,
			&i.UnitKind,
			&i.Qty,
			&i.Mass,
			&i.Volume,
			&i.IsAssembled,
			&i.IsStored,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCPopulation = `-- name: ReadSCPopulation :many
select sc_population.population_cd,
       population_codes.name as population_kind,
       sc_population.qty,
       sc_population.pay_rate,
       sc_population.rebel_qty
from scs,
     sc_population,
     population_codes
where scs.id = ?1
  and sc_population.sc_id = scs.id
  and (sc_population.effdt <= ?2 and ?2 < sc_population.enddt)
  and population_codes.code = sc_population.population_cd
order by population_codes.sort_order
`

type ReadSCPopulationParams struct {
	ScID   int64
	AsOfDt int64
}

type ReadSCPopulationRow struct {
	PopulationCd   string
	PopulationKind string
	Qty            int64
	PayRate        float64
	RebelQty       int64
}

// ReadSCPopulation returns a list of the population for a given colony.
func (q *Queries) ReadSCPopulation(ctx context.Context, arg ReadSCPopulationParams) ([]ReadSCPopulationRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCPopulation, arg.ScID, arg.AsOfDt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCPopulationRow
	for rows.Next() {
		var i ReadSCPopulationRow
		if err := rows.Scan(
			&i.PopulationCd,
			&i.PopulationKind,
			&i.Qty,
			&i.PayRate,
			&i.RebelQty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCProbeOrders = `-- name: ReadSCProbeOrders :exec
select target_id, kind
from sc_probe_order
where sc_id = ?1
  and effdt = ?2
order by target_id, kind
`

type ReadSCProbeOrdersParams struct {
	ScID  int64
	Effdt int64
}

// ReadSCProbeOrders returns a list of probe orders issued by a colony on a given turn.
func (q *Queries) ReadSCProbeOrders(ctx context.Context, arg ReadSCProbeOrdersParams) error {
	_, err := q.db.ExecContext(ctx, readSCProbeOrders, arg.ScID, arg.Effdt)
	return err
}

const readSCSurveyOrders = `-- name: ReadSCSurveyOrders :exec
select target_id
from sc_survey_order
where sc_id = ?1
  and effdt = ?2
order by target_id
`

type ReadSCSurveyOrdersParams struct {
	ScID  int64
	Effdt int64
}

// ReadSCSurveyOrders returns a list of survey orders issued by a colony on a given turn.
func (q *Queries) ReadSCSurveyOrders(ctx context.Context, arg ReadSCSurveyOrdersParams) error {
	_, err := q.db.ExecContext(ctx, readSCSurveyOrders, arg.ScID, arg.Effdt)
	return err
}

const updateSCInventoryEndDt = `-- name: UpdateSCInventoryEndDt :exec
update sc_inventory
set enddt = ?1
where sc_id = ?2
  and unit_cd = ?3
  and unit_tech_level = ?4
  and effdt = ?5
`

type UpdateSCInventoryEndDtParams struct {
	Enddt         int64
	ScID          int64
	UnitCd        string
	UnitTechLevel int64
	Effdt         int64
}

// UpdateSCInventoryEndDt updates the end date for an inventory entry.
func (q *Queries) UpdateSCInventoryEndDt(ctx context.Context, arg UpdateSCInventoryEndDtParams) error {
	_, err := q.db.ExecContext(ctx, updateSCInventoryEndDt,
		arg.Enddt,
		arg.ScID,
		arg.UnitCd,
		arg.UnitTechLevel,
		arg.Effdt,
	)
	return err
}

const updateSCLocationEndDt = `-- name: UpdateSCLocationEndDt :exec
update sc_location
set enddt = ?1
where sc_id = ?2
  and effdt = ?3
`

type UpdateSCLocationEndDtParams struct {
	Enddt int64
	ScID  int64
	Effdt int64
}

// UpdateSCLocationEndDt updates the end date for a location entry.
func (q *Queries) UpdateSCLocationEndDt(ctx context.Context, arg UpdateSCLocationEndDtParams) error {
	_, err := q.db.ExecContext(ctx, updateSCLocationEndDt, arg.Enddt, arg.ScID, arg.Effdt)
	return err
}

const updateSCNameEndDt = `-- name: UpdateSCNameEndDt :exec
update sc_name
set enddt = ?1
where sc_id = ?2
  and effdt = ?3
`

type UpdateSCNameEndDtParams struct {
	Enddt int64
	ScID  int64
	Effdt int64
}

// UpdateSCNameEndDt updates the end date for a name entry.
func (q *Queries) UpdateSCNameEndDt(ctx context.Context, arg UpdateSCNameEndDtParams) error {
	_, err := q.db.ExecContext(ctx, updateSCNameEndDt, arg.Enddt, arg.ScID, arg.Effdt)
	return err
}

const updateSCPopulationEndDt = `-- name: UpdateSCPopulationEndDt :exec
update sc_population
set enddt = ?1
where sc_id = ?2
  and population_cd = ?3
  and effdt = ?4
`

type UpdateSCPopulationEndDtParams struct {
	Enddt        int64
	ScID         int64
	PopulationCd string
	Effdt        int64
}

// UpdateSCPopulationEndDt updates the end date for a population entry.
func (q *Queries) UpdateSCPopulationEndDt(ctx context.Context, arg UpdateSCPopulationEndDtParams) error {
	_, err := q.db.ExecContext(ctx, updateSCPopulationEndDt,
		arg.Enddt,
		arg.ScID,
		arg.PopulationCd,
		arg.Effdt,
	)
	return err
}
