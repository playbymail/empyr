// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: empires.sql

package sqlite

import (
	"context"
)

const correctEmpireName = `-- name: CorrectEmpireName :exec
update empire_name
set name = ?1
where empire_id = ?2
  and effdt = ?3
  and enddt = ?4
`

type CorrectEmpireNameParams struct {
	Name     string
	EmpireID int64
	Effdt    int64
	Enddt    int64
}

// CorrectEmpireName updates an existing record for an empire name.
func (q *Queries) CorrectEmpireName(ctx context.Context, arg CorrectEmpireNameParams) error {
	_, err := q.db.ExecContext(ctx, correctEmpireName,
		arg.Name,
		arg.EmpireID,
		arg.Effdt,
		arg.Enddt,
	)
	return err
}

const createEmpire = `-- name: CreateEmpire :one
insert into empire (home_system_id, home_star_id, home_orbit_id, is_active)
values (?1, ?2, ?3, ?4)
returning id
`

type CreateEmpireParams struct {
	HomeSystemID int64
	HomeStarID   int64
	HomeOrbitID  int64
	IsActive     int64
}

// CreateEmpire creates a new empire and returns the new empire ID.
func (q *Queries) CreateEmpire(ctx context.Context, arg CreateEmpireParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createEmpire,
		arg.HomeSystemID,
		arg.HomeStarID,
		arg.HomeOrbitID,
		arg.IsActive,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createEmpireName = `-- name: CreateEmpireName :exec
insert into empire_name(empire_id, effdt, enddt, name)
values (?1, ?2, ?3, ?4)
`

type CreateEmpireNameParams struct {
	EmpireID int64
	Effdt    int64
	Enddt    int64
	Name     string
}

// CreateEmpireName adds a new empire name record.
func (q *Queries) CreateEmpireName(ctx context.Context, arg CreateEmpireNameParams) error {
	_, err := q.db.ExecContext(ctx, createEmpireName,
		arg.EmpireID,
		arg.Effdt,
		arg.Enddt,
		arg.Name,
	)
	return err
}

const createEmpirePlayer = `-- name: CreateEmpirePlayer :exec
insert into empire_player (empire_id, effdt, enddt, username, email)
values (?1, ?2, ?3, ?4, ?5)
`

type CreateEmpirePlayerParams struct {
	EmpireID int64
	Effdt    int64
	Enddt    int64
	Username string
	Email    string
}

// CreateEmpirePlayer creates a new empire player record.
func (q *Queries) CreateEmpirePlayer(ctx context.Context, arg CreateEmpirePlayerParams) error {
	_, err := q.db.ExecContext(ctx, createEmpirePlayer,
		arg.EmpireID,
		arg.Effdt,
		arg.Enddt,
		arg.Username,
		arg.Email,
	)
	return err
}

const createEmpireSystemName = `-- name: CreateEmpireSystemName :exec
insert into empire_system_name (empire_id, system_id, effdt, enddt, name)
values (?1, ?2, ?3, ?4, ?5)
`

type CreateEmpireSystemNameParams struct {
	EmpireID int64
	SystemID int64
	Effdt    int64
	Enddt    int64
	Name     string
}

// CreateEmpireSystemName creates a new empire system name record.
func (q *Queries) CreateEmpireSystemName(ctx context.Context, arg CreateEmpireSystemNameParams) error {
	_, err := q.db.ExecContext(ctx, createEmpireSystemName,
		arg.EmpireID,
		arg.SystemID,
		arg.Effdt,
		arg.Enddt,
		arg.Name,
	)
	return err
}

const createEmpireWithID = `-- name: CreateEmpireWithID :exec
insert into empire (id, home_system_id, home_star_id, home_orbit_id, is_active)
values (?1, ?2, ?3, ?4, ?5)
`

type CreateEmpireWithIDParams struct {
	ID           int64
	HomeSystemID int64
	HomeStarID   int64
	HomeOrbitID  int64
	IsActive     int64
}

// CreateEmpireWithID creates a new empire with the given ID.
func (q *Queries) CreateEmpireWithID(ctx context.Context, arg CreateEmpireWithIDParams) error {
	_, err := q.db.ExecContext(ctx, createEmpireWithID,
		arg.ID,
		arg.HomeSystemID,
		arg.HomeStarID,
		arg.HomeOrbitID,
		arg.IsActive,
	)
	return err
}

const expireEmpireName = `-- name: ExpireEmpireName :exec
update empire_name
set enddt = ?1
where empire_id = ?2
  and effdt = ?3
`

type ExpireEmpireNameParams struct {
	Enddt    int64
	EmpireID int64
	Effdt    int64
}

// ExpireEmpireName updates the end date for an empire name.
func (q *Queries) ExpireEmpireName(ctx context.Context, arg ExpireEmpireNameParams) error {
	_, err := q.db.ExecContext(ctx, expireEmpireName, arg.Enddt, arg.EmpireID, arg.Effdt)
	return err
}

const isEmpireActive = `-- name: IsEmpireActive :one
select is_active
from empire
where id = ?1
`

// IsEmpireActive checks if an empire is active.
func (q *Queries) IsEmpireActive(ctx context.Context, empireID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, isEmpireActive, empireID)
	var is_active int64
	err := row.Scan(&is_active)
	return is_active, err
}

const readActiveEmpireCount = `-- name: ReadActiveEmpireCount :one
select count(id)
from empire
where is_active = 1
`

// ReadActiveEmpireCount returns the number of active empire.
func (q *Queries) ReadActiveEmpireCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, readActiveEmpireCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const readActiveEmpires = `-- name: ReadActiveEmpires :many
select id as empire_id
from empire
where is_active = 1
order by id
`

// ReadActiveEmpires returns the data for all active empires in a game.
func (q *Queries) ReadActiveEmpires(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, readActiveEmpires)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var empire_id int64
		if err := rows.Scan(&empire_id); err != nil {
			return nil, err
		}
		items = append(items, empire_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readEmpireByID = `-- name: ReadEmpireByID :one
select games.code          as game_code,
       games.name          as game_name,
       games.display_name  as game_display_name,
       games.current_turn  as game_current_turn,
       empire.id           as empire_id,
       empire_name.name    as empire_name,
       empire_player.username,
       empire_player.email,
       empire.home_system_id,
       systems.system_name as home_system_name,
       empire.home_star_id,
       stars.star_name     as home_star_name,
       empire.home_orbit_id,
       orbits.orbit_no
from empire,
     empire_name,
     empire_player,
     systems,
     stars,
     orbits,
     games
where empire.id = ?1
  and empire.is_active = 1
  and empire_name.empire_id = empire.id
  and (empire_name.effdt <= ?2 and ?2 <= empire_name.enddt)
  and empire_player.empire_id = empire.id
  and (empire_player.effdt <= ?2 and ?2 <= empire_player.enddt)
  and systems.id = empire.home_system_id
  and stars.id = empire.home_star_id
  and orbits.id = empire.home_orbit_id
`

type ReadEmpireByIDParams struct {
	EmpireID int64
	AsOfDt   int64
}

type ReadEmpireByIDRow struct {
	GameCode        string
	GameName        string
	GameDisplayName string
	GameCurrentTurn int64
	EmpireID        int64
	EmpireName      string
	Username        string
	Email           string
	HomeSystemID    int64
	HomeSystemName  string
	HomeStarID      int64
	HomeStarName    string
	HomeOrbitID     int64
	OrbitNo         int64
}

// ReadEmpireByID reads an empire by its id.
// This should only be used by admins. Regular users should use ReadEmpireByUser.
func (q *Queries) ReadEmpireByID(ctx context.Context, arg ReadEmpireByIDParams) (ReadEmpireByIDRow, error) {
	row := q.db.QueryRowContext(ctx, readEmpireByID, arg.EmpireID, arg.AsOfDt)
	var i ReadEmpireByIDRow
	err := row.Scan(
		&i.GameCode,
		&i.GameName,
		&i.GameDisplayName,
		&i.GameCurrentTurn,
		&i.EmpireID,
		&i.EmpireName,
		&i.Username,
		&i.Email,
		&i.HomeSystemID,
		&i.HomeSystemName,
		&i.HomeStarID,
		&i.HomeStarName,
		&i.HomeOrbitID,
		&i.OrbitNo,
	)
	return i, err
}

const readEmpireName = `-- name: ReadEmpireName :one
select name, effdt, enddt
from empire_name
where empire_id = ?1
  and (empire_name.effdt <= ?2 and ?2 <= empire_name.enddt)
`

type ReadEmpireNameParams struct {
	EmpireID int64
	AsOfDt   int64
}

type ReadEmpireNameRow struct {
	Name  string
	Effdt int64
	Enddt int64
}

// ReadEmpireName returns the name of an empire as of the given date.
func (q *Queries) ReadEmpireName(ctx context.Context, arg ReadEmpireNameParams) (ReadEmpireNameRow, error) {
	row := q.db.QueryRowContext(ctx, readEmpireName, arg.EmpireID, arg.AsOfDt)
	var i ReadEmpireNameRow
	err := row.Scan(&i.Name, &i.Effdt, &i.Enddt)
	return i, err
}

const readNextEmpireNumber = `-- name: ReadNextEmpireNumber :one
select min(id) + 0 as empire_id
from empire
where is_active = 0
`

// ReadNextEmpireNumber reads the next empire number in a game.
func (q *Queries) ReadNextEmpireNumber(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, readNextEmpireNumber)
	var empire_id int64
	err := row.Scan(&empire_id)
	return empire_id, err
}

const updateEmpirePlayerEndDt = `-- name: UpdateEmpirePlayerEndDt :exec
update empire_player
set enddt = ?1
where empire_id = ?2
  and effdt = ?3
`

type UpdateEmpirePlayerEndDtParams struct {
	Enddt    int64
	EmpireID int64
	Effdt    int64
}

// UpdateEmpirePlayerEndDt updates the end date for an empire player.
func (q *Queries) UpdateEmpirePlayerEndDt(ctx context.Context, arg UpdateEmpirePlayerEndDtParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpirePlayerEndDt, arg.Enddt, arg.EmpireID, arg.Effdt)
	return err
}

const updateEmpireStatus = `-- name: UpdateEmpireStatus :exec
update empire
set is_active = ?1
where id = ?2
`

type UpdateEmpireStatusParams struct {
	IsActive int64
	EmpireID int64
}

// UpdateEmpireStatus updates the status of an empire.
func (q *Queries) UpdateEmpireStatus(ctx context.Context, arg UpdateEmpireStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateEmpireStatus, arg.IsActive, arg.EmpireID)
	return err
}
