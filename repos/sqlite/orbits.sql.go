// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orbits.sql

package sqlite

import (
	"context"
)

const createOrbit = `-- name: CreateOrbit :one
insert into orbits (system_id, star_id, orbit_no, kind, habitability, nbr_of_deposits)
values (?1, ?2, ?3, ?4, ?5, ?6)
returning id
`

type CreateOrbitParams struct {
	SystemID      int64
	StarID        int64
	OrbitNo       int64
	Kind          string
	Habitability  int64
	NbrOfDeposits int64
}

// CreateOrbit creates a new orbit.
func (q *Queries) CreateOrbit(ctx context.Context, arg CreateOrbitParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createOrbit,
		arg.SystemID,
		arg.StarID,
		arg.OrbitNo,
		arg.Kind,
		arg.Habitability,
		arg.NbrOfDeposits,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readOrbitStar = `-- name: ReadOrbitStar :one
select systems.id as system_id,
       systems.system_name,
       stars.id   as star_id,
       stars.star_name,
       orbits.orbit_no
from orbits,
     stars,
     systems
where orbits.id = ?1
  and stars.id = orbits.star_id
  and systems.id = orbits.system_id
`

type ReadOrbitStarRow struct {
	SystemID   int64
	SystemName string
	StarID     int64
	StarName   string
	OrbitNo    int64
}

// ReadOrbitStar returns the star for a given orbit.
func (q *Queries) ReadOrbitStar(ctx context.Context, orbitID int64) (ReadOrbitStarRow, error) {
	row := q.db.QueryRowContext(ctx, readOrbitStar, orbitID)
	var i ReadOrbitStarRow
	err := row.Scan(
		&i.SystemID,
		&i.SystemName,
		&i.StarID,
		&i.StarName,
		&i.OrbitNo,
	)
	return i, err
}

const readOrbitSurvey = `-- name: ReadOrbitSurvey :many
select systems.id          as system_id,
       systems.system_name,
       stars.id            as star_id,
       stars.star_name,
       orbits.orbit_no     as orbit_no,
       orbit_codes.name    as orbit_kind,
       deposits.id         as deposit_id,
       deposits.deposit_no as deposit_no,
       unit_codes.code     as deposit_kind,
       deposit_history.qty as deposit_qty,
       deposits.yield_pct  as yield_pct
from orbits,
     orbit_codes,
     deposits,
     deposit_history,
     unit_codes,
     stars,
     systems
where orbits.id = ?1
  and deposits.orbit_id = orbits.id
  and deposit_history.deposit_id = deposits.id
  and deposit_history.effdt <= ?2
  and ?2 < deposit_history.enddt
  and unit_codes.code = deposits.kind
  and stars.id = orbits.star_id
  and systems.id = orbits.system_id
order by deposits.deposit_no
`

type ReadOrbitSurveyParams struct {
	OrbitID int64
	TurnNo  int64
}

type ReadOrbitSurveyRow struct {
	SystemID    int64
	SystemName  string
	StarID      int64
	StarName    string
	OrbitNo     int64
	OrbitKind   string
	DepositID   int64
	DepositNo   int64
	DepositKind string
	DepositQty  int64
	YieldPct    int64
}

// ReadOrbitSurvey reads the orbit survey data for a game.
func (q *Queries) ReadOrbitSurvey(ctx context.Context, arg ReadOrbitSurveyParams) ([]ReadOrbitSurveyRow, error) {
	rows, err := q.db.QueryContext(ctx, readOrbitSurvey, arg.OrbitID, arg.TurnNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadOrbitSurveyRow
	for rows.Next() {
		var i ReadOrbitSurveyRow
		if err := rows.Scan(
			&i.SystemID,
			&i.SystemName,
			&i.StarID,
			&i.StarName,
			&i.OrbitNo,
			&i.OrbitKind,
			&i.DepositID,
			&i.DepositNo,
			&i.DepositKind,
			&i.DepositQty,
			&i.YieldPct,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrbit = `-- name: UpdateOrbit :exec
update orbits
set kind            = ?1,
    habitability    = ?2,
    nbr_of_deposits = ?3
where id = ?4
`

type UpdateOrbitParams struct {
	Kind          string
	Habitability  int64
	NbrOfDeposits int64
	OrbitID       int64
}

// UpdateOrbit updates an existing orbit.
func (q *Queries) UpdateOrbit(ctx context.Context, arg UpdateOrbitParams) error {
	_, err := q.db.ExecContext(ctx, updateOrbit,
		arg.Kind,
		arg.Habitability,
		arg.NbrOfDeposits,
		arg.OrbitID,
	)
	return err
}
