// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: systems.sql

package sqlite

import (
	"context"
)

const createSystem = `-- name: CreateSystem :one

insert into systems (x, y, z, system_name, nbr_of_stars)
values (?1, ?2, ?3, ?4, ?5)
returning id
`

type CreateSystemParams struct {
	X          int64
	Y          int64
	Z          int64
	SystemName string
	NbrOfStars int64
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreateSystem creates a new system.
func (q *Queries) CreateSystem(ctx context.Context, arg CreateSystemParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSystem,
		arg.X,
		arg.Y,
		arg.Z,
		arg.SystemName,
		arg.NbrOfStars,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readAllSystems = `-- name: ReadAllSystems :many
select id as system_id,
       system_name,
       x  as x,
       y  as y,
       z  as z,
       nbr_of_stars
from systems
order by id
`

type ReadAllSystemsRow struct {
	SystemID   int64
	SystemName string
	X          int64
	Y          int64
	Z          int64
	NbrOfStars int64
}

// ReadAllSystems reads the system data for a game.
func (q *Queries) ReadAllSystems(ctx context.Context) ([]ReadAllSystemsRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllSystems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllSystemsRow
	for rows.Next() {
		var i ReadAllSystemsRow
		if err := rows.Scan(
			&i.SystemID,
			&i.SystemName,
			&i.X,
			&i.Y,
			&i.Z,
			&i.NbrOfStars,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
