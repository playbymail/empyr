// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: games.sql

package sqlite

import (
	"context"
)

const createGame = `-- name: CreateGame :exec

insert into games (code, name, display_name)
values (?1, ?2, ?3)
`

type CreateGameParams struct {
	Code        string
	Name        string
	DisplayName string
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreateGame creates a new game.
func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) error {
	_, err := q.db.ExecContext(ctx, createGame, arg.Code, arg.Name, arg.DisplayName)
	return err
}

const readAllGameInfo = `-- name: ReadAllGameInfo :one
select code,
       name,
       display_name,
       current_turn,
       home_system_id,
       home_star_id,
       home_orbit_id
from games
`

type ReadAllGameInfoRow struct {
	Code         string
	Name         string
	DisplayName  string
	CurrentTurn  int64
	HomeSystemID int64
	HomeStarID   int64
	HomeOrbitID  int64
}

// ReadAllGameInfo returns a list of all games in the database, even the inactive ones.
func (q *Queries) ReadAllGameInfo(ctx context.Context) (ReadAllGameInfoRow, error) {
	row := q.db.QueryRowContext(ctx, readAllGameInfo)
	var i ReadAllGameInfoRow
	err := row.Scan(
		&i.Code,
		&i.Name,
		&i.DisplayName,
		&i.CurrentTurn,
		&i.HomeSystemID,
		&i.HomeStarID,
		&i.HomeOrbitID,
	)
	return i, err
}

const readCurrentTurn = `-- name: ReadCurrentTurn :one
select current_turn
from games
`

// ReadCurrentTurn gets the current turn for a game.
func (q *Queries) ReadCurrentTurn(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, readCurrentTurn)
	var current_turn int64
	err := row.Scan(&current_turn)
	return current_turn, err
}

const updateCurrentTurn = `-- name: UpdateCurrentTurn :exec
update games
set current_turn = ?1
`

// UpdateCurrentTurn increments the game turn number.
func (q *Queries) UpdateCurrentTurn(ctx context.Context, turnNumber int64) error {
	_, err := q.db.ExecContext(ctx, updateCurrentTurn, turnNumber)
	return err
}

const updateGameHomeSystems = `-- name: UpdateGameHomeSystems :exec
update games
set home_system_id = ?1,
    home_star_id   = ?2,
    home_orbit_id  = ?3
`

type UpdateGameHomeSystemsParams struct {
	HomeSystemID int64
	HomeStarID   int64
	HomeOrbitID  int64
}

// UpdateGameHomeSystems updates the home system for a game.
func (q *Queries) UpdateGameHomeSystems(ctx context.Context, arg UpdateGameHomeSystemsParams) error {
	_, err := q.db.ExecContext(ctx, updateGameHomeSystems, arg.HomeSystemID, arg.HomeStarID, arg.HomeOrbitID)
	return err
}
