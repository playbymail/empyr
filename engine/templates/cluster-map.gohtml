<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>EC - {{.Game }} - Cluster Map</title>
    <style>
        html, body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #renderCanvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }
    </style>
</head>
<body>
<canvas id="renderCanvas"></canvas>
<script src="https://cdn.babylonjs.com/babylon.js"></script>
<script>
    const canvas = document.getElementById("renderCanvas"); // Get the canvas element
    const engine = new BABYLON.Engine(canvas, true); // Generate the BABYLON 3D engine

    const createStandardMaterial = function (name, options, scene) {
        const material = new BABYLON.StandardMaterial(name, scene);
        for (let property in material) {
            if (options[property]) {
                material[property] = options[property];
            }
        }
        return material;
    }

    const fetchSector = function (x, y, z) {
        // systems in the current sector
        const sector = {
            origin: {x: x, y: y, z: z},
            systems: [
                {{ range .Systems }}
                {
                    id: {{.Id}},
                    x: {{.X}},
                    y: {{.Y}},
                    z: {{.Z}},
                    size: 0.4,
                    color: BABYLON.Color3.{{.Color}}(),
                    origin: new BABYLON.Vector3({{.X}}, {{.Y}}, {{.Z}}),
                },
                {{ end }}
            ],
        };

        // determine the radius of the sector
        sector.systems.forEach((system, ndx) => {
            if (ndx === 0) {
                sector.minX = system.x
                sector.maxX = system.x
                sector.minY = system.y
                sector.maxY = system.y
                sector.minZ = system.z
                sector.maxZ = system.z
            }
            if (system.x < sector.minX) {
                sector.minX = system.x
            } else if (sector.maxX < system.x) {
                sector.maxX = system.x
            }
            if (system.y < sector.minY) {
                sector.minY = system.y
            } else if (sector.maxY < system.y) {
                sector.maxY = system.y
            }
            if (system.z < sector.minZ) {
                sector.minZ = system.z
            } else if (sector.maxZ < system.z) {
                sector.maxZ = system.z
            }
        });
        sector.radius = Math.max(sector.maxX - sector.minX, sector.maxY - sector.minY, sector.maxZ - sector.minZ) / 2 + 1;

        return sector;
    }

    const createScene = function (sector) {
        // This creates a basic Babylon Scene object (non-mesh)
        const scene = new BABYLON.Scene(engine);
        // This attaches the camera to the canvas
        const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 45, new BABYLON.Vector3(0, 0, 0));
        camera.attachControl(canvas, true);
        camera.wheelPrecision = 50; // Adjust for smoother zoom

        // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

        // Default intensity is 1. Let's dim the light a small amount
        light.intensity = 0.7;

        // add the systems to the scene
        sector.systems.forEach((system, ndx) => {
            const mesh = BABYLON.MeshBuilder.CreateSphere(`obj-${ndx}`, {diameter: system.size, segments: 32}, scene);
            mesh.position.x = system.x;
            mesh.position.y = system.y;
            mesh.position.z = system.z;
            mesh.material = createStandardMaterial("sphereMaterial", {diffuseColor: system.color}, scene);
        });

        const makeCoordinatesPlane = function (text, color, size) {
            const dynamicTexture = new BABYLON.DynamicTexture("DynamicTexture", 50, scene, true);
            dynamicTexture.hasAlpha = true;
            dynamicTexture.drawText(text, 5, 40, "bold 12px Arial", color, "transparent", true);
            const plane = BABYLON.MeshBuilder.CreatePlane("TextPlane", {width: size, height: size}, scene);
            plane.material = new BABYLON.StandardMaterial("TextPlaneMaterial", scene);
            plane.material.backFaceCulling = false;
            plane.material.specularColor = new BABYLON.Color3(0, 0, 0);
            plane.material.diffuseTexture = dynamicTexture;
            return plane;
        };

        // Add coordinate label for each system
        sector.systems.forEach((system, ndx) => {
            const labelText = `${system.x+15},${system.y+15},${system.z+15}`;
            const coordLabel = makeCoordinatesPlane(labelText, "black", 0.8);
            coordLabel.position = new BABYLON.Vector3(
                system.x + 0.5,
                system.y + 0.5,
                system.z + 0.5
            );
            // Make label always face the camera
            coordLabel.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL;
        });

        const cubeSize = 15;
        const points = [
            new BABYLON.Vector3(-cubeSize, -cubeSize, -cubeSize),
            new BABYLON.Vector3(cubeSize, -cubeSize, -cubeSize),
            new BABYLON.Vector3(cubeSize, -cubeSize, cubeSize),
            new BABYLON.Vector3(-cubeSize, -cubeSize, cubeSize),
            new BABYLON.Vector3(-cubeSize, cubeSize, -cubeSize),
            new BABYLON.Vector3(cubeSize, cubeSize, -cubeSize),
            new BABYLON.Vector3(cubeSize, cubeSize, cubeSize),
            new BABYLON.Vector3(-cubeSize, cubeSize, cubeSize)
        ];

        BABYLON.MeshBuilder.CreateLines("bottomEdge1", {points: [points[0], points[1]]}, scene).color = new BABYLON.Color3(1, 0, 0);
        BABYLON.MeshBuilder.CreateLines("bottomEdge2", {points: [points[1], points[2]]}, scene).color = new BABYLON.Color3(1, 0, 0);
        BABYLON.MeshBuilder.CreateLines("bottomEdge3", {points: [points[2], points[3]]}, scene).color = new BABYLON.Color3(1, 0, 0);
        BABYLON.MeshBuilder.CreateLines("bottomEdge4", {points: [points[3], points[0]]}, scene).color = new BABYLON.Color3(1, 0, 0);

        BABYLON.MeshBuilder.CreateLines("topEdge1", {points: [points[4], points[5]]}, scene).color = new BABYLON.Color3(1, 0, 0);
        BABYLON.MeshBuilder.CreateLines("topEdge2", {points: [points[5], points[6]]}, scene).color = new BABYLON.Color3(1, 0, 0);
        BABYLON.MeshBuilder.CreateLines("topEdge3", {points: [points[6], points[7]]}, scene).color = new BABYLON.Color3(1, 0, 0);
        BABYLON.MeshBuilder.CreateLines("topEdge4", {points: [points[7], points[4]]}, scene).color = new BABYLON.Color3(1, 0, 0);

        BABYLON.MeshBuilder.CreateLines("vertEdge1", {points: [points[0], points[4]]}, scene).color = new BABYLON.Color3(1, 0, 0);
        BABYLON.MeshBuilder.CreateLines("vertEdge2", {points: [points[1], points[5]]}, scene).color = new BABYLON.Color3(1, 0, 0);
        BABYLON.MeshBuilder.CreateLines("vertEdge3", {points: [points[2], points[6]]}, scene).color = new BABYLON.Color3(1, 0, 0);
        BABYLON.MeshBuilder.CreateLines("vertEdge4", {points: [points[3], points[7]]}, scene).color = new BABYLON.Color3(1, 0, 0);

        const axisLength = 15;

        BABYLON.MeshBuilder.CreateLines("xAxis", {
            points: [
                new BABYLON.Vector3(-axisLength, 0, 0),
                new BABYLON.Vector3(axisLength, 0, 0)
            ]
        }, scene).color = new BABYLON.Color3(1, 1, 0);

        BABYLON.MeshBuilder.CreateLines("yAxis", {
            points: [
                new BABYLON.Vector3(0, -axisLength, 0),
                new BABYLON.Vector3(0, axisLength, 0)
            ]
        }, scene).color = new BABYLON.Color3(1, 1, 0);

        BABYLON.MeshBuilder.CreateLines("zAxis", {
            points: [
                new BABYLON.Vector3(0, 0, -axisLength),
                new BABYLON.Vector3(0, 0, axisLength)
            ]
        }, scene).color = new BABYLON.Color3(1, 1, 0);

        const makeTextPlane = function (text, color, size) {
            const dynamicTexture = new BABYLON.DynamicTexture("DynamicTexture", 50, scene, true);
            dynamicTexture.hasAlpha = true;
            dynamicTexture.drawText(text, 5, 40, "bold 36px Arial", color, "transparent", true);
            const plane = BABYLON.MeshBuilder.CreatePlane("TextPlane", {width: size, height: size}, scene);
            plane.material = new BABYLON.StandardMaterial("TextPlaneMaterial", scene);
            plane.material.backFaceCulling = false;
            plane.material.specularColor = new BABYLON.Color3(0, 0, 0);
            plane.material.diffuseTexture = dynamicTexture;
            return plane;
        };

        const axisLabel = makeTextPlane("X", "yellow", 1);
        axisLabel.position = new BABYLON.Vector3(axisLength + 0.5, 0, 0);
        axisLabel.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL;

        const yLabel = makeTextPlane("Y", "yellow", 1);
        yLabel.position = new BABYLON.Vector3(0, axisLength + 0.5, 0);
        yLabel.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL;

        const zLabel = makeTextPlane("Z", "yellow", 1);
        zLabel.position = new BABYLON.Vector3(0, 0, axisLength + 0.5);
        zLabel.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL;

        return scene;
    };

    // Call the createScene function
    const scene = createScene(fetchSector(0, 0, 0));

    // Register a render loop to repeatedly render the scene
    engine.runRenderLoop(function () {
        scene.render();
    });

    // Watch for browser/canvas resize events
    window.addEventListener("resize", function () {
        engine.resize();
    });
</script>
</body>
</html>