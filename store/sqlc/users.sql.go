// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlc

import (
	"context"
)

const readUsersInGame = `-- name: ReadUsersInGame :many

SELECT users.id, users.username, users.email, users.is_active, users.is_admin
FROM users,
     empires
WHERE empires.game_id = ?1
  AND users.id = empires.user_id
`

type ReadUsersInGameRow struct {
	ID       int64
	Username string
	Email    string
	IsActive int64
	IsAdmin  int64
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// ReadUsersInGame gets a list of users in a game.
func (q *Queries) ReadUsersInGame(ctx context.Context, gameID int64) ([]ReadUsersInGameRow, error) {
	rows, err := q.db.QueryContext(ctx, readUsersInGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadUsersInGameRow
	for rows.Next() {
		var i ReadUsersInGameRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.IsActive,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
