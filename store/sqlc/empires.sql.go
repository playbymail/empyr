// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: empires.sql

package sqlc

import (
	"context"
)

const createEmpire = `-- name: CreateEmpire :one
INSERT INTO empires (game_id,
                     player_id,
                     empire_no,
                     name,
                     home_system_id,
                     home_star_id,
                     home_orbit_id,
                     home_planet_id)
VALUES (?1,
        ?2,
        ?3,
        ?4,
        ?5,
        ?6,
        ?7,
        ?8)
RETURNING id
`

type CreateEmpireParams struct {
	GameID       int64
	PlayerID     int64
	EmpireNo     int64
	Name         string
	HomeSystemID int64
	HomeStarID   int64
	HomeOrbitID  int64
	HomePlanetID int64
}

// CreateEmpire creates a new empire.
func (q *Queries) CreateEmpire(ctx context.Context, arg CreateEmpireParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createEmpire,
		arg.GameID,
		arg.PlayerID,
		arg.EmpireNo,
		arg.Name,
		arg.HomeSystemID,
		arg.HomeStarID,
		arg.HomeOrbitID,
		arg.HomePlanetID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readNextEmpireNumber = `-- name: ReadNextEmpireNumber :one
UPDATE games
SET last_empire_no = last_empire_no + 1
WHERE id = ?1
RETURNING last_empire_no as next_empire_no
`

// ReadNextEmpireNumber reads the next empire number.
func (q *Queries) ReadNextEmpireNumber(ctx context.Context, gameID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, readNextEmpireNumber, gameID)
	var last_empire_no int64
	err := row.Scan(&last_empire_no)
	return last_empire_no, err
}
