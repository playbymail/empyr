// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: authn.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (username, email, hashed_password, is_active, is_admin)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
	IsActive       int64
	IsAdmin        int64
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreateUser registers a new user.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
		arg.IsActive,
		arg.IsAdmin,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readUserByEmail = `-- name: ReadUserByEmail :one
SELECT id, username, email, hashed_password, is_active, is_admin
FROM users
WHERE email = ?1
`

type ReadUserByEmailRow struct {
	ID             int64
	Username       string
	Email          string
	HashedPassword string
	IsActive       int64
	IsAdmin        int64
}

// ReadUserByEmail gets a user by its email address.
func (q *Queries) ReadUserByEmail(ctx context.Context, email string) (ReadUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, readUserByEmail, email)
	var i ReadUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsAdmin,
	)
	return i, err
}

const readUserByID = `-- name: ReadUserByID :one
SELECT id, username, email, hashed_password, is_active, is_admin
FROM users
WHERE id = ?1
`

type ReadUserByIDRow struct {
	ID             int64
	Username       string
	Email          string
	HashedPassword string
	IsActive       int64
	IsAdmin        int64
}

// ReadUserByID gets a user by its id.
func (q *Queries) ReadUserByID(ctx context.Context, userID int64) (ReadUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, readUserByID, userID)
	var i ReadUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsAdmin,
	)
	return i, err
}

const readUserByUsername = `-- name: ReadUserByUsername :one
SELECT id, username, email, hashed_password, is_active, is_admin
FROM users
WHERE username = ?1
`

type ReadUserByUsernameRow struct {
	ID             int64
	Username       string
	Email          string
	HashedPassword string
	IsActive       int64
	IsAdmin        int64
}

// ReadUserByUsername gets a user by its name.
func (q *Queries) ReadUserByUsername(ctx context.Context, username string) (ReadUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, readUserByUsername, username)
	var i ReadUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.IsActive,
		&i.IsAdmin,
	)
	return i, err
}
