// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createDeposit = `-- name: CreateDeposit :one
INSERT INTO deposits (planet_id, deposit_no, kind, yield_pct, initial_qty, remaining_qty)
VALUES (?1, ?2, ?3, ?4, ?5, ?6)
RETURNING id
`

type CreateDepositParams struct {
	PlanetID     int64
	DepositNo    int64
	Kind         string
	YieldPct     int64
	InitialQty   int64
	RemainingQty int64
}

// CreateDeposit creates a new deposit.
func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createDeposit,
		arg.PlanetID,
		arg.DepositNo,
		arg.Kind,
		arg.YieldPct,
		arg.InitialQty,
		arg.RemainingQty,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createEmpire = `-- name: CreateEmpire :one
INSERT INTO empires (game_id, empire_no, name, home_system_id, home_star_id, home_orbit_id, home_planet_id)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
RETURNING id
`

type CreateEmpireParams struct {
	GameID       int64
	EmpireNo     int64
	Name         string
	HomeSystemID int64
	HomeStarID   int64
	HomeOrbitID  int64
	HomePlanetID int64
}

// CreateEmpire creates a new empire.
func (q *Queries) CreateEmpire(ctx context.Context, arg CreateEmpireParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createEmpire,
		arg.GameID,
		arg.EmpireNo,
		arg.Name,
		arg.HomeSystemID,
		arg.HomeStarID,
		arg.HomeOrbitID,
		arg.HomePlanetID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createGame = `-- name: CreateGame :one

INSERT INTO games (code, name, display_name)
VALUES (?1, ?2, ?3)
RETURNING id
`

type CreateGameParams struct {
	Code        string
	Name        string
	DisplayName string
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreateGame creates a new game.
func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createGame, arg.Code, arg.Name, arg.DisplayName)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createOrbit = `-- name: CreateOrbit :one
INSERT INTO orbits (star_id, orbit_no, kind, scarcity)
VALUES (?1, ?2, ?3, ?4)
RETURNING id
`

type CreateOrbitParams struct {
	StarID   int64
	OrbitNo  int64
	Kind     string
	Scarcity int64
}

// CreateOrbit creates a new orbit.
func (q *Queries) CreateOrbit(ctx context.Context, arg CreateOrbitParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createOrbit,
		arg.StarID,
		arg.OrbitNo,
		arg.Kind,
		arg.Scarcity,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createPlanet = `-- name: CreatePlanet :one
INSERT INTO planets (orbit_id, kind, scarcity, habitability)
VALUES (?1, ?2, ?3, ?4)
RETURNING id
`

type CreatePlanetParams struct {
	OrbitID      int64
	Kind         string
	Scarcity     int64
	Habitability int64
}

// CreatePlanet creates a new planet.
func (q *Queries) CreatePlanet(ctx context.Context, arg CreatePlanetParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPlanet,
		arg.OrbitID,
		arg.Kind,
		arg.Scarcity,
		arg.Habitability,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createStar = `-- name: CreateStar :one
INSERT INTO stars (system_id, sequence, scarcity)
VALUES (?1, ?2, ?3)
RETURNING id
`

type CreateStarParams struct {
	SystemID int64
	Sequence string
	Scarcity int64
}

// CreateStar creates a new star in an existing system.
func (q *Queries) CreateStar(ctx context.Context, arg CreateStarParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createStar, arg.SystemID, arg.Sequence, arg.Scarcity)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSystem = `-- name: CreateSystem :one
INSERT INTO systems (game_id, x, y, z, scarcity)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id
`

type CreateSystemParams struct {
	GameID   int64
	X        int64
	Y        int64
	Z        int64
	Scarcity int64
}

// CreateSystem creates a new system.
func (q *Queries) CreateSystem(ctx context.Context, arg CreateSystemParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSystem,
		arg.GameID,
		arg.X,
		arg.Y,
		arg.Z,
		arg.Scarcity,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSystemDistance = `-- name: CreateSystemDistance :exec
INSERT INTO system_distances (from_system_id, to_system_id, distance)
VALUES (?1, ?2, ?3)
`

type CreateSystemDistanceParams struct {
	FromSystemID int64
	ToSystemID   int64
	Distance     int64
}

// CreateSystemDistance inserts the distance between two systems.
func (q *Queries) CreateSystemDistance(ctx context.Context, arg CreateSystemDistanceParams) error {
	_, err := q.db.ExecContext(ctx, createSystemDistance, arg.FromSystemID, arg.ToSystemID, arg.Distance)
	return err
}

const deleteEmptyDeposits = `-- name: DeleteEmptyDeposits :exec
DELETE
FROM deposits
WHERE kind = 'none'
`

// DeleteEmptyOrbits deletes all orbits with no planets.
func (q *Queries) DeleteEmptyDeposits(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteEmptyDeposits)
	return err
}

const deleteEmptyOrbits = `-- name: DeleteEmptyOrbits :exec
DELETE
FROM orbits
WHERE kind = 'empty'
`

// DeleteEmptyOrbits deletes all orbits with no planets.
func (q *Queries) DeleteEmptyOrbits(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteEmptyOrbits)
	return err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE
FROM games
WHERE code = ?1
`

// DeleteGame deletes an existing game
func (q *Queries) DeleteGame(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteGame, code)
	return err
}

const getCurrentGameTurn = `-- name: GetCurrentGameTurn :one
SELECT current_turn
FROM games
WHERE id = ?1
`

// GetCurrentGameTurn gets the current game turn.
func (q *Queries) GetCurrentGameTurn(ctx context.Context, gameID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCurrentGameTurn, gameID)
	var current_turn int64
	err := row.Scan(&current_turn)
	return current_turn, err
}

const readClusterMap = `-- name: ReadClusterMap :many
SELECT systems.id AS id,
       systems.x as x,
       systems.y as y,
       systems.z as z,
       count(stars.id) AS number_of_stars
FROM games
LEFT JOIN systems on games.id = systems.game_id
LEFT JOIN stars  on systems.id = stars.system_id
WHERE games.code = ?1
GROUP BY systems.id, systems.x, systems.y, systems.z
ORDER BY systems.id
`

type ReadClusterMapRow struct {
	ID            sql.NullInt64
	X             sql.NullInt64
	Y             sql.NullInt64
	Z             sql.NullInt64
	NumberOfStars int64
}

// ReadClusterMap reads the cluster map.
func (q *Queries) ReadClusterMap(ctx context.Context, gameCode string) ([]ReadClusterMapRow, error) {
	rows, err := q.db.QueryContext(ctx, readClusterMap, gameCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadClusterMapRow
	for rows.Next() {
		var i ReadClusterMapRow
		if err := rows.Scan(
			&i.ID,
			&i.X,
			&i.Y,
			&i.Z,
			&i.NumberOfStars,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGameTurn = `-- name: UpdateGameTurn :exec
UPDATE games
SET current_turn = ?1
WHERE id = ?2
`

type UpdateGameTurnParams struct {
	TurnNumber int64
	GameID     int64
}

// UpdateGameTurn increments the game turn number.
func (q *Queries) UpdateGameTurn(ctx context.Context, arg UpdateGameTurnParams) error {
	_, err := q.db.ExecContext(ctx, updateGameTurn, arg.TurnNumber, arg.GameID)
	return err
}
