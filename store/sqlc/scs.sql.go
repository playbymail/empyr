// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: scs.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createSC = `-- name: CreateSC :one
insert into scs (empire_id, sc_cd, sc_tech_level, name, location, is_on_surface, rations, sol, birth_rate, death_rate)
values (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10)
returning id
`

type CreateSCParams struct {
	EmpireID    int64
	ScCd        string
	ScTechLevel int64
	Name        string
	Location    int64
	IsOnSurface int64
	Rations     float64
	Sol         float64
	BirthRate   float64
	DeathRate   float64
}

// CreateSC creates a new ship or colony.
func (q *Queries) CreateSC(ctx context.Context, arg CreateSCParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createSC,
		arg.EmpireID,
		arg.ScCd,
		arg.ScTechLevel,
		arg.Name,
		arg.Location,
		arg.IsOnSurface,
		arg.Rations,
		arg.Sol,
		arg.BirthRate,
		arg.DeathRate,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createSCFactoryGroup = `-- name: CreateSCFactoryGroup :exec
insert into factory_groups (sc_id, group_no, orders_cd, orders_tech_level)
values (?1, ?2, ?3, ?4)
`

type CreateSCFactoryGroupParams struct {
	ScID            int64
	GroupNo         int64
	OrdersCd        string
	OrdersTechLevel int64
}

// CreateSCFactoryGroup creates a new ship or colony factory group.
func (q *Queries) CreateSCFactoryGroup(ctx context.Context, arg CreateSCFactoryGroupParams) error {
	_, err := q.db.ExecContext(ctx, createSCFactoryGroup,
		arg.ScID,
		arg.GroupNo,
		arg.OrdersCd,
		arg.OrdersTechLevel,
	)
	return err
}

const createSCFactoryGroupUnit = `-- name: CreateSCFactoryGroupUnit :exec
insert into factory_group (sc_id, group_no, group_tech_level, nbr_of_units,
                           orders_cd, orders_tech_level,
                           wip_25pct_qty, wip_50pct_qty, wip_75pct_qty)
values (?1, ?2, ?3, ?4,
        ?5, ?6,
        ?7, ?8, ?9)
`

type CreateSCFactoryGroupUnitParams struct {
	ScID            int64
	GroupNo         int64
	GroupTechLevel  int64
	NbrOfUnits      int64
	OrdersCd        string
	OrdersTechLevel int64
	Wip25pctQty     int64
	Wip50pctQty     int64
	Wip75pctQty     int64
}

// CreateSCFactoryGroupUnit creates a new ship or colony factory group unit.
func (q *Queries) CreateSCFactoryGroupUnit(ctx context.Context, arg CreateSCFactoryGroupUnitParams) error {
	_, err := q.db.ExecContext(ctx, createSCFactoryGroupUnit,
		arg.ScID,
		arg.GroupNo,
		arg.GroupTechLevel,
		arg.NbrOfUnits,
		arg.OrdersCd,
		arg.OrdersTechLevel,
		arg.Wip25pctQty,
		arg.Wip50pctQty,
		arg.Wip75pctQty,
	)
	return err
}

const createSCFactoryProductionSummary = `-- name: CreateSCFactoryProductionSummary :exec
insert into sc_manufacturing_summary (sc_id, group_no, turn_no,
                                      fuel_consumed, mets_consumed, nmts_consumed,
                                      pro_consumed, usk_consumed, aut_consumed,
                                      unit_cd, unit_tech_level, units_produced)
values (?1, ?2, ?3,
        ?4, ?5, ?6,
        ?7, ?8, ?9,
        ?10, ?11, ?12)
on conflict (sc_id, group_no, turn_no)
    do update set fuel_consumed   = ?4,
                  mets_consumed   = ?5,
                  nmts_consumed   = ?6,
                  pro_consumed    = ?7,
                  usk_consumed    = ?8,
                  aut_consumed    = ?9,
                  unit_cd         = ?10,
                  unit_tech_level = ?11,
                  units_produced  = ?12
`

type CreateSCFactoryProductionSummaryParams struct {
	ScID          int64
	GroupNo       int64
	TurnNo        int64
	FuelConsumed  int64
	MetsConsumed  int64
	NmtsConsumed  int64
	ProConsumed   int64
	UskConsumed   int64
	AutConsumed   int64
	UnitCd        string
	UnitTechLevel int64
	UnitsProduced int64
}

// CreateSCFactoryProductionSummary creates a new ship or colony factory summary
// of production for a single turn.
func (q *Queries) CreateSCFactoryProductionSummary(ctx context.Context, arg CreateSCFactoryProductionSummaryParams) error {
	_, err := q.db.ExecContext(ctx, createSCFactoryProductionSummary,
		arg.ScID,
		arg.GroupNo,
		arg.TurnNo,
		arg.FuelConsumed,
		arg.MetsConsumed,
		arg.NmtsConsumed,
		arg.ProConsumed,
		arg.UskConsumed,
		arg.AutConsumed,
		arg.UnitCd,
		arg.UnitTechLevel,
		arg.UnitsProduced,
	)
	return err
}

const createSCFarmGroup = `-- name: CreateSCFarmGroup :exec
insert into farm_groups (sc_id, group_no)
values (?1, ?2)
`

type CreateSCFarmGroupParams struct {
	ScID    int64
	GroupNo int64
}

// CreateSCFarmGroup creates a new ship or colony farm group.
func (q *Queries) CreateSCFarmGroup(ctx context.Context, arg CreateSCFarmGroupParams) error {
	_, err := q.db.ExecContext(ctx, createSCFarmGroup, arg.ScID, arg.GroupNo)
	return err
}

const createSCFarmGroupUnit = `-- name: CreateSCFarmGroupUnit :exec
insert into farm_group (sc_id, group_no, group_tech_level, nbr_of_units)
values (?1, ?2, ?3, ?4)
`

type CreateSCFarmGroupUnitParams struct {
	ScID           int64
	GroupNo        int64
	GroupTechLevel int64
	NbrOfUnits     int64
}

// CreateSCFarmGroupUnit creates a new ship or colony farm group unit.
func (q *Queries) CreateSCFarmGroupUnit(ctx context.Context, arg CreateSCFarmGroupUnitParams) error {
	_, err := q.db.ExecContext(ctx, createSCFarmGroupUnit,
		arg.ScID,
		arg.GroupNo,
		arg.GroupTechLevel,
		arg.NbrOfUnits,
	)
	return err
}

const createSCFarmProductionSummary = `-- name: CreateSCFarmProductionSummary :exec
insert into sc_farming_summary (sc_id, group_no, turn_no,
                                fuel_consumed,
                                pro_consumed, usk_consumed, aut_consumed,
                                food_produced)
values (?1, ?2, ?3,
        ?4,
        ?5, ?6, ?7,
        ?8)
on conflict (sc_id, group_no, turn_no)
    do update set fuel_consumed = ?4,
                  pro_consumed  = ?5,
                  usk_consumed  = ?6,
                  aut_consumed  = ?7,
                  food_produced = ?8
`

type CreateSCFarmProductionSummaryParams struct {
	ScID         int64
	GroupNo      int64
	TurnNo       int64
	FuelConsumed int64
	ProConsumed  int64
	UskConsumed  int64
	AutConsumed  int64
	FoodProduced int64
}

// CreateSCFarmProductionSummary creates a new ship or colony farm summary
// of production for a single turn.
func (q *Queries) CreateSCFarmProductionSummary(ctx context.Context, arg CreateSCFarmProductionSummaryParams) error {
	_, err := q.db.ExecContext(ctx, createSCFarmProductionSummary,
		arg.ScID,
		arg.GroupNo,
		arg.TurnNo,
		arg.FuelConsumed,
		arg.ProConsumed,
		arg.UskConsumed,
		arg.AutConsumed,
		arg.FoodProduced,
	)
	return err
}

const createSCInventory = `-- name: CreateSCInventory :exec
insert into inventory (sc_id, unit_cd, tech_level, qty, mass, volume, is_assembled, is_stored)
values (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)
`

type CreateSCInventoryParams struct {
	ScID        int64
	UnitCd      string
	TechLevel   int64
	Qty         int64
	Mass        float64
	Volume      float64
	IsAssembled int64
	IsStored    int64
}

// CreateSCInventory creates a new ship or colony inventory entry.
func (q *Queries) CreateSCInventory(ctx context.Context, arg CreateSCInventoryParams) error {
	_, err := q.db.ExecContext(ctx, createSCInventory,
		arg.ScID,
		arg.UnitCd,
		arg.TechLevel,
		arg.Qty,
		arg.Mass,
		arg.Volume,
		arg.IsAssembled,
		arg.IsStored,
	)
	return err
}

const createSCMiningGroup = `-- name: CreateSCMiningGroup :exec
insert into mining_groups (sc_id, group_no, deposit_id)
values (?1, ?2, ?3)
`

type CreateSCMiningGroupParams struct {
	ScID      int64
	GroupNo   int64
	DepositID int64
}

// CreateSCMiningGroup creates a new ship or colony mining group.
func (q *Queries) CreateSCMiningGroup(ctx context.Context, arg CreateSCMiningGroupParams) error {
	_, err := q.db.ExecContext(ctx, createSCMiningGroup, arg.ScID, arg.GroupNo, arg.DepositID)
	return err
}

const createSCMiningGroupUnit = `-- name: CreateSCMiningGroupUnit :exec
insert into mining_group (sc_id, group_no, group_tech_level, nbr_of_units)
values (?1, ?2, ?3, ?4)
`

type CreateSCMiningGroupUnitParams struct {
	ScID           int64
	GroupNo        int64
	GroupTechLevel int64
	NbrOfUnits     int64
}

// CreateSCMiningGroupUnit creates a new ship or colony mining group unit.
func (q *Queries) CreateSCMiningGroupUnit(ctx context.Context, arg CreateSCMiningGroupUnitParams) error {
	_, err := q.db.ExecContext(ctx, createSCMiningGroupUnit,
		arg.ScID,
		arg.GroupNo,
		arg.GroupTechLevel,
		arg.NbrOfUnits,
	)
	return err
}

const createSCMiningProductionSummary = `-- name: CreateSCMiningProductionSummary :exec
insert into sc_mining_summary (sc_id, group_no, turn_no,
                               fuel_consumed,
                               pro_consumed, usk_consumed, aut_consumed,
                               fuel_produced, gold_produced, mets_produced, nmts_produced)
values (?1, ?2, ?3,
        ?4,
        ?5, ?6, ?7,
        ?8, ?9, ?10, ?11)
on conflict (sc_id, group_no, turn_no)
    do update set fuel_consumed = ?4,
                  pro_consumed  = ?5,
                  usk_consumed  = ?6,
                  aut_consumed  = ?7,
                  fuel_produced = ?8,
                  gold_produced = ?9,
                  mets_produced = ?10,
                  nmts_produced = ?11
`

type CreateSCMiningProductionSummaryParams struct {
	ScID         int64
	GroupNo      int64
	TurnNo       int64
	FuelConsumed int64
	ProConsumed  int64
	UskConsumed  int64
	AutConsumed  int64
	FuelProduced int64
	GoldProduced int64
	MetsProduced int64
	NmtsProduced int64
}

// CreateSCMiningProductionSummary creates a new ship or colony mining summary
// of production for a single turn.
func (q *Queries) CreateSCMiningProductionSummary(ctx context.Context, arg CreateSCMiningProductionSummaryParams) error {
	_, err := q.db.ExecContext(ctx, createSCMiningProductionSummary,
		arg.ScID,
		arg.GroupNo,
		arg.TurnNo,
		arg.FuelConsumed,
		arg.ProConsumed,
		arg.UskConsumed,
		arg.AutConsumed,
		arg.FuelProduced,
		arg.GoldProduced,
		arg.MetsProduced,
		arg.NmtsProduced,
	)
	return err
}

const createSCPopulation = `-- name: CreateSCPopulation :exec
insert into population (sc_id, population_cd, qty, pay_rate, rebel_qty)
values (?1, ?2, ?3, ?4, ?5)
`

type CreateSCPopulationParams struct {
	ScID         int64
	PopulationCd string
	Qty          int64
	PayRate      float64
	RebelQty     int64
}

// CreateSCPopulation creates a new ship or colony population entry.
func (q *Queries) CreateSCPopulation(ctx context.Context, arg CreateSCPopulationParams) error {
	_, err := q.db.ExecContext(ctx, createSCPopulation,
		arg.ScID,
		arg.PopulationCd,
		arg.Qty,
		arg.PayRate,
		arg.RebelQty,
	)
	return err
}

const createSCProbeOrder = `-- name: CreateSCProbeOrder :exec
insert into probe_orders (sc_id, kind, target_id, status)
values (?1, ?2, ?3, 'ordered')
`

type CreateSCProbeOrderParams struct {
	ScID     int64
	Kind     string
	TargetID int64
}

// CreateSCProbeOrder creates a new ship or colony probe order.
func (q *Queries) CreateSCProbeOrder(ctx context.Context, arg CreateSCProbeOrderParams) error {
	_, err := q.db.ExecContext(ctx, createSCProbeOrder, arg.ScID, arg.Kind, arg.TargetID)
	return err
}

const createSCSurveyOrder = `-- name: CreateSCSurveyOrder :exec
insert into survey_orders (sc_id, target_id, status)
values (?1, ?2, 'ordered')
`

type CreateSCSurveyOrderParams struct {
	ScID     int64
	TargetID int64
}

// CreateSCSurveyOrder creates a new ship or colony survey order.
func (q *Queries) CreateSCSurveyOrder(ctx context.Context, arg CreateSCSurveyOrderParams) error {
	_, err := q.db.ExecContext(ctx, createSCSurveyOrder, arg.ScID, arg.TargetID)
	return err
}

const readAllColoniesByEmpire = `-- name: ReadAllColoniesByEmpire :many
select scs.id        as sc_id,
       systems.id    as system_id,
       systems.system_name,
       stars.id      as star_id,
       stars.star_name,
       orbits.orbit_no,
       sc_codes.name as sc_kind,
       scs.sc_tech_level,
       scs.name,
       scs.rations,
       scs.birth_rate,
       scs.death_rate,
       scs.sol
from scs,
     orbits,
     stars,
     systems,
     sc_codes
where scs.empire_id = ?1
  and scs.sc_cd in ('COPN', 'CENC', 'CORB')
  and orbits.id = scs.location
  and stars.id = orbits.star_id
  and systems.id = orbits.system_id
  and sc_codes.code = scs.sc_cd
order by scs.id
`

type ReadAllColoniesByEmpireRow struct {
	ScID        int64
	SystemID    int64
	SystemName  string
	StarID      int64
	StarName    string
	OrbitNo     int64
	ScKind      string
	ScTechLevel int64
	Name        string
	Rations     float64
	BirthRate   float64
	DeathRate   float64
	Sol         float64
}

// ReadAllColoniesByEmpire reads the colonies for a given empire in a game.
func (q *Queries) ReadAllColoniesByEmpire(ctx context.Context, empireID int64) ([]ReadAllColoniesByEmpireRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllColoniesByEmpire, empireID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllColoniesByEmpireRow
	for rows.Next() {
		var i ReadAllColoniesByEmpireRow
		if err := rows.Scan(
			&i.ScID,
			&i.SystemID,
			&i.SystemName,
			&i.StarID,
			&i.StarName,
			&i.OrbitNo,
			&i.ScKind,
			&i.ScTechLevel,
			&i.Name,
			&i.Rations,
			&i.BirthRate,
			&i.DeathRate,
			&i.Sol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAllSurveyOrdersForGameTurn = `-- name: ReadAllSurveyOrdersForGameTurn :many
select empires.id as empire_id,
       survey_orders.sc_id,
       survey_orders.target_id,
       survey_orders.status
from empires,
     scs,
     survey_orders
where scs.empire_id = empires.id
  and survey_orders.sc_id = scs.id
order by empires.id, survey_orders.sc_id, survey_orders.target_id, survey_orders.status
`

type ReadAllSurveyOrdersForGameTurnRow struct {
	EmpireID int64
	ScID     int64
	TargetID int64
	Status   string
}

// ReadAllSurveyOrdersGameForTurn returns a list of survey orders issued in a given turn of a game.
func (q *Queries) ReadAllSurveyOrdersForGameTurn(ctx context.Context) ([]ReadAllSurveyOrdersForGameTurnRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllSurveyOrdersForGameTurn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllSurveyOrdersForGameTurnRow
	for rows.Next() {
		var i ReadAllSurveyOrdersForGameTurnRow
		if err := rows.Scan(
			&i.EmpireID,
			&i.ScID,
			&i.TargetID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCFactoryGroup = `-- name: ReadSCFactoryGroup :many
select orders_cd,
       orders_tech_level,
       group_tech_level,
       nbr_of_units,
       wip_25pct_qty,
       wip_50pct_qty,
       wip_75pct_qty
from factory_group
where factory_group.sc_id = ?1
  and factory_group.group_no = ?2
order by orders_cd, orders_tech_level, group_tech_level
`

type ReadSCFactoryGroupParams struct {
	ScID    int64
	GroupNo int64
}

type ReadSCFactoryGroupRow struct {
	OrdersCd        string
	OrdersTechLevel int64
	GroupTechLevel  int64
	NbrOfUnits      int64
	Wip25pctQty     int64
	Wip50pctQty     int64
	Wip75pctQty     int64
}

// ReadSCFactoryGroup reads the factory group for a given ship or colony.
func (q *Queries) ReadSCFactoryGroup(ctx context.Context, arg ReadSCFactoryGroupParams) ([]ReadSCFactoryGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCFactoryGroup, arg.ScID, arg.GroupNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCFactoryGroupRow
	for rows.Next() {
		var i ReadSCFactoryGroupRow
		if err := rows.Scan(
			&i.OrdersCd,
			&i.OrdersTechLevel,
			&i.GroupTechLevel,
			&i.NbrOfUnits,
			&i.Wip25pctQty,
			&i.Wip50pctQty,
			&i.Wip75pctQty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCFactoryGroupRetoolOrder = `-- name: ReadSCFactoryGroupRetoolOrder :one
select sc_id, group_no, turn_no, orders_cd, orders_tech_level
from factory_group_retool
where sc_id = ?1
  and group_no = ?2
`

type ReadSCFactoryGroupRetoolOrderParams struct {
	ScID    int64
	GroupNo int64
}

// ReadSCFactoryGroupRetoolOrder reads the factory group retooling for a given ship or colony.
func (q *Queries) ReadSCFactoryGroupRetoolOrder(ctx context.Context, arg ReadSCFactoryGroupRetoolOrderParams) (FactoryGroupRetool, error) {
	row := q.db.QueryRowContext(ctx, readSCFactoryGroupRetoolOrder, arg.ScID, arg.GroupNo)
	var i FactoryGroupRetool
	err := row.Scan(
		&i.ScID,
		&i.GroupNo,
		&i.TurnNo,
		&i.OrdersCd,
		&i.OrdersTechLevel,
	)
	return i, err
}

const readSCFactoryGroups = `-- name: ReadSCFactoryGroups :many
SELECT sc_id,
       group_no,
       orders_cd,
       orders_tech_level
FROM factory_groups
WHERE sc_id = ?1
ORDER BY sc_id, group_no
`

// ReadSCFactoryGroups reads the factory groups for a given ship or colony.
func (q *Queries) ReadSCFactoryGroups(ctx context.Context, scID int64) ([]FactoryGroups, error) {
	rows, err := q.db.QueryContext(ctx, readSCFactoryGroups, scID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FactoryGroups
	for rows.Next() {
		var i FactoryGroups
		if err := rows.Scan(
			&i.ScID,
			&i.GroupNo,
			&i.OrdersCd,
			&i.OrdersTechLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCFarmGroups = `-- name: ReadSCFarmGroups :many
select group_no,
       group_tech_level,
       sum(nbr_of_units) as nbr_of_units
from farm_group
where farm_group.sc_id = ?1
group by group_no, group_tech_level
order by group_no, group_tech_level
`

type ReadSCFarmGroupsRow struct {
	GroupNo        int64
	GroupTechLevel int64
	NbrOfUnits     sql.NullFloat64
}

// ReadSCFarmGroups reads the farm groups for a given ship or colony.
func (q *Queries) ReadSCFarmGroups(ctx context.Context, scID int64) ([]ReadSCFarmGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCFarmGroups, scID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCFarmGroupsRow
	for rows.Next() {
		var i ReadSCFarmGroupsRow
		if err := rows.Scan(&i.GroupNo, &i.GroupTechLevel, &i.NbrOfUnits); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCInventory = `-- name: ReadSCInventory :many
select inventory.unit_cd,
       inventory.tech_level,
       unit_codes.name as unit_kind,
       inventory.qty,
       inventory.mass,
       inventory.volume,
       inventory.is_assembled,
       inventory.is_stored
from inventory,
     unit_codes
where inventory.sc_id = ?1
  and unit_codes.code = inventory.unit_cd
order by inventory.unit_cd, inventory.tech_level, inventory.qty
`

type ReadSCInventoryRow struct {
	UnitCd      string
	TechLevel   int64
	UnitKind    string
	Qty         int64
	Mass        float64
	Volume      float64
	IsAssembled int64
	IsStored    int64
}

// ReadSCInventory reads the inventory for a given ship or colony.
func (q *Queries) ReadSCInventory(ctx context.Context, scID int64) ([]ReadSCInventoryRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCInventory, scID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCInventoryRow
	for rows.Next() {
		var i ReadSCInventoryRow
		if err := rows.Scan(
			&i.UnitCd,
			&i.TechLevel,
			&i.UnitKind,
			&i.Qty,
			&i.Mass,
			&i.Volume,
			&i.IsAssembled,
			&i.IsStored,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCMiningGroup = `-- name: ReadSCMiningGroup :many
select sc_id,
       group_no,
       group_tech_level,
       sum(mining_group.nbr_of_units) as nbr_of_units
from mining_group
where sc_id = ?1
  and group_no = ?2
group by sc_id, group_no, group_tech_level
order by sc_id, group_no, group_tech_level
`

type ReadSCMiningGroupParams struct {
	ScID    int64
	GroupNo int64
}

type ReadSCMiningGroupRow struct {
	ScID           int64
	GroupNo        int64
	GroupTechLevel int64
	NbrOfUnits     sql.NullFloat64
}

// ReadSCMiningGroup returns the data for a given mining group.
func (q *Queries) ReadSCMiningGroup(ctx context.Context, arg ReadSCMiningGroupParams) ([]ReadSCMiningGroupRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCMiningGroup, arg.ScID, arg.GroupNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCMiningGroupRow
	for rows.Next() {
		var i ReadSCMiningGroupRow
		if err := rows.Scan(
			&i.ScID,
			&i.GroupNo,
			&i.GroupTechLevel,
			&i.NbrOfUnits,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCMiningGroups = `-- name: ReadSCMiningGroups :many
select mining_groups.sc_id,
       mining_groups.group_no,
       deposits.deposit_no,
       deposits.qty,
       deposits.kind as deposit_kind,
       deposits.yield_pct
from mining_groups,
     deposits
where mining_groups.sc_id = ?1
  and deposits.id = mining_groups.deposit_id
order by mining_groups.sc_id, mining_groups.group_no, deposits.deposit_no
`

type ReadSCMiningGroupsRow struct {
	ScID        int64
	GroupNo     int64
	DepositNo   int64
	Qty         int64
	DepositKind string
	YieldPct    int64
}

// ReadSCMiningGroups reads the mining groups for a given ship or colony.
func (q *Queries) ReadSCMiningGroups(ctx context.Context, scID int64) ([]ReadSCMiningGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCMiningGroups, scID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCMiningGroupsRow
	for rows.Next() {
		var i ReadSCMiningGroupsRow
		if err := rows.Scan(
			&i.ScID,
			&i.GroupNo,
			&i.DepositNo,
			&i.Qty,
			&i.DepositKind,
			&i.YieldPct,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCPopulation = `-- name: ReadSCPopulation :many
select population.population_cd,
       population_codes.name as population_kind,
       population.qty,
       population.pay_rate,
       population.rebel_qty
from population,
     population_codes
where population.sc_id = ?1
  and population_codes.code = population.population_cd
order by population_codes.sort_order
`

type ReadSCPopulationRow struct {
	PopulationCd   string
	PopulationKind string
	Qty            int64
	PayRate        float64
	RebelQty       int64
}

// ReadSCPopulation reads the population for a given ship or colony.
func (q *Queries) ReadSCPopulation(ctx context.Context, scID int64) ([]ReadSCPopulationRow, error) {
	rows, err := q.db.QueryContext(ctx, readSCPopulation, scID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadSCPopulationRow
	for rows.Next() {
		var i ReadSCPopulationRow
		if err := rows.Scan(
			&i.PopulationCd,
			&i.PopulationKind,
			&i.Qty,
			&i.PayRate,
			&i.RebelQty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSCProbeOrders = `-- name: ReadSCProbeOrders :exec
select kind, target_id, status
from probe_orders
where sc_id = ?1
order by kind, target_id, status
`

// ReadSCProbeOrders returns a list of probe orderss issued by a ship or colony on a given turn.
func (q *Queries) ReadSCProbeOrders(ctx context.Context, scID int64) error {
	_, err := q.db.ExecContext(ctx, readSCProbeOrders, scID)
	return err
}

const readSCSurveyOrders = `-- name: ReadSCSurveyOrders :exec
select target_id, status
from survey_orders
where sc_id = ?1
order by target_id, status
`

// ReadSCSurveyOrders returns a list of survey orders issued by a ship or colony on a given turn.
func (q *Queries) ReadSCSurveyOrders(ctx context.Context, scID int64) error {
	_, err := q.db.ExecContext(ctx, readSCSurveyOrders, scID)
	return err
}

const resetProbeOrdersStatus = `-- name: ResetProbeOrdersStatus :exec
update probe_orders
set status = 'ordered'
`

// ResetProbeOrdersStatus resets the status of all probe orders issued in a given turn.
func (q *Queries) ResetProbeOrdersStatus(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetProbeOrdersStatus)
	return err
}

const resetSurveyOrdersStatus = `-- name: ResetSurveyOrdersStatus :exec
update survey_orders
set status = 'ordered'
`

// ResetSurveyOrdersStatus resets the status of all survey orders issued in a given turn.
func (q *Queries) ResetSurveyOrdersStatus(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetSurveyOrdersStatus)
	return err
}
