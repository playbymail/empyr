// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stars.sql

package sqlc

import (
	"context"
)

const createStar = `-- name: CreateStar :one

INSERT INTO stars (system_id, sequence)
VALUES (?1, ?2)
RETURNING id
`

type CreateStarParams struct {
	SystemID int64
	Sequence string
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreateStar creates a new star in an existing system.
func (q *Queries) CreateStar(ctx context.Context, arg CreateStarParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createStar, arg.SystemID, arg.Sequence)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readAllStarsInCluster = `-- name: ReadAllStarsInCluster :many
SELECT systems.id     AS system_id,
       stars.id       AS star_id,
       stars.sequence AS sequence,
       systems.x      AS x,
       systems.y      AS y,
       systems.z      AS z
FROM clusters,
     systems,
     stars
WHERE clusters.id = ?1
  AND systems.cluster_id = clusters.id
  AND stars.system_id = systems.id
ORDER BY systems.id, stars.sequence
`

type ReadAllStarsInClusterRow struct {
	SystemID int64
	StarID   int64
	Sequence string
	X        int64
	Y        int64
	Z        int64
}

// ReadAllStarsInCluster returns a list of all the stars in a cluster.
func (q *Queries) ReadAllStarsInCluster(ctx context.Context, clusterID int64) ([]ReadAllStarsInClusterRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllStarsInCluster, clusterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllStarsInClusterRow
	for rows.Next() {
		var i ReadAllStarsInClusterRow
		if err := rows.Scan(
			&i.SystemID,
			&i.StarID,
			&i.Sequence,
			&i.X,
			&i.Y,
			&i.Z,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAllStarsInSystem = `-- name: ReadAllStarsInSystem :many
SELECT stars.id, stars.sequence
FROM stars
WHERE stars.system_id = ?1
ORDER BY stars.id
`

type ReadAllStarsInSystemRow struct {
	ID       int64
	Sequence string
}

// ReadAllStarsInSystem returns a list of stars in a system.
func (q *Queries) ReadAllStarsInSystem(ctx context.Context, systemID int64) ([]ReadAllStarsInSystemRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllStarsInSystem, systemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllStarsInSystemRow
	for rows.Next() {
		var i ReadAllStarsInSystemRow
		if err := rows.Scan(&i.ID, &i.Sequence); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
