// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stars.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createStar = `-- name: CreateStar :one

INSERT INTO stars (system_id, sequence)
VALUES (?1, ?2)
RETURNING id
`

type CreateStarParams struct {
	SystemID int64
	Sequence string
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreateStar creates a new star in an existing system.
func (q *Queries) CreateStar(ctx context.Context, arg CreateStarParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createStar, arg.SystemID, arg.Sequence)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readAllStarsInCluster = `-- name: ReadAllStarsInCluster :many
SELECT systems.id     AS system_id,
       stars.id       AS star_id,
       stars.sequence AS sequence,
       systems.x      AS x,
       systems.y      AS y,
       systems.z      AS z
FROM clusters,
     systems,
     stars
WHERE clusters.id = ?1
  AND systems.cluster_id = clusters.id
  AND stars.system_id = systems.id
ORDER BY systems.id, stars.sequence
`

type ReadAllStarsInClusterRow struct {
	SystemID int64
	StarID   int64
	Sequence string
	X        int64
	Y        int64
	Z        int64
}

// ReadAllStarsInCluster returns a list of all the stars in a cluster.
func (q *Queries) ReadAllStarsInCluster(ctx context.Context, clusterID int64) ([]ReadAllStarsInClusterRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllStarsInCluster, clusterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllStarsInClusterRow
	for rows.Next() {
		var i ReadAllStarsInClusterRow
		if err := rows.Scan(
			&i.SystemID,
			&i.StarID,
			&i.Sequence,
			&i.X,
			&i.Y,
			&i.Z,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAllStarsInSystem = `-- name: ReadAllStarsInSystem :many
SELECT stars.id, systems.x, systems.y, systems.z, stars.sequence
FROM systems, stars
WHERE systems.id = ?1
  AND stars.system_id = systems.id
ORDER BY stars.id
`

type ReadAllStarsInSystemRow struct {
	ID       int64
	X        int64
	Y        int64
	Z        int64
	Sequence string
}

// ReadAllStarsInSystem returns a list of stars in a system.
func (q *Queries) ReadAllStarsInSystem(ctx context.Context, systemID int64) ([]ReadAllStarsInSystemRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllStarsInSystem, systemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllStarsInSystemRow
	for rows.Next() {
		var i ReadAllStarsInSystemRow
		if err := rows.Scan(
			&i.ID,
			&i.X,
			&i.Y,
			&i.Z,
			&i.Sequence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readStarSurvey = `-- name: ReadStarSurvey :many
SELECT orbits.id                   AS orbit_id,
       planets.id                  AS planet_id,
       orbits.kind                 AS orbit_kind,
       orbits.orbit_no             AS orbit_no,
       planets.kind                AS planet_kind,
       deposits.kind               AS deposit_kind,
       sum(deposits.remaining_qty) AS quantity
FROM stars,
     orbits,
     planets,
     deposits
WHERE stars.id = ?1
  AND orbits.star_id = stars.id
  AND planets.orbit_id = orbits.id
  AND deposits.planet_id = planets.id
GROUP BY orbits.id, orbits.orbit_no, orbits.kind, planets.id, planets.kind, deposits.kind
ORDER BY orbits.orbit_no, deposits.kind
`

type ReadStarSurveyRow struct {
	OrbitID     int64
	PlanetID    int64
	OrbitKind   string
	OrbitNo     int64
	PlanetKind  string
	DepositKind string
	Quantity    sql.NullFloat64
}

// ReadStarSurvey reads the star survey data for star in a game.
func (q *Queries) ReadStarSurvey(ctx context.Context, starID int64) ([]ReadStarSurveyRow, error) {
	rows, err := q.db.QueryContext(ctx, readStarSurvey, starID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadStarSurveyRow
	for rows.Next() {
		var i ReadStarSurveyRow
		if err := rows.Scan(
			&i.OrbitID,
			&i.PlanetID,
			&i.OrbitKind,
			&i.OrbitNo,
			&i.PlanetKind,
			&i.DepositKind,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
