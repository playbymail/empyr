// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stars.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createStar = `-- name: CreateStar :one

insert into stars (system_id, sequence, star_name, nbr_of_orbits)
values (?1, ?2, ?3, ?4)
returning id
`

type CreateStarParams struct {
	SystemID    int64
	Sequence    string
	StarName    string
	NbrOfOrbits int64
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreateStar creates a new star in an existing system.
func (q *Queries) CreateStar(ctx context.Context, arg CreateStarParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createStar,
		arg.SystemID,
		arg.Sequence,
		arg.StarName,
		arg.NbrOfOrbits,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readAllStarsInCluster = `-- name: ReadAllStarsInCluster :many
select systems.id     as system_id,
       system_name,
       stars.id       as star_id,
       stars.sequence as sequence,
       stars.star_name,
       systems.x      as x,
       systems.y      as y,
       systems.z      as z
from systems,
     stars
where stars.system_id = systems.id
order by systems.id, stars.sequence
`

type ReadAllStarsInClusterRow struct {
	SystemID   int64
	SystemName string
	StarID     int64
	Sequence   string
	StarName   string
	X          int64
	Y          int64
	Z          int64
}

// ReadAllStarsInCluster returns a list of all the stars in a cluster.
func (q *Queries) ReadAllStarsInCluster(ctx context.Context) ([]ReadAllStarsInClusterRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllStarsInCluster)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllStarsInClusterRow
	for rows.Next() {
		var i ReadAllStarsInClusterRow
		if err := rows.Scan(
			&i.SystemID,
			&i.SystemName,
			&i.StarID,
			&i.Sequence,
			&i.StarName,
			&i.X,
			&i.Y,
			&i.Z,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAllStarsInSystem = `-- name: ReadAllStarsInSystem :many
select stars.id, systems.x, systems.y, systems.z, stars.sequence, stars.star_name
from systems,
     stars
where systems.id = ?1
  and stars.system_id = systems.id
order by stars.sequence
`

type ReadAllStarsInSystemRow struct {
	ID       int64
	X        int64
	Y        int64
	Z        int64
	Sequence string
	StarName string
}

// ReadAllStarsInSystem returns a list of stars in a system.
func (q *Queries) ReadAllStarsInSystem(ctx context.Context, systemID int64) ([]ReadAllStarsInSystemRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllStarsInSystem, systemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllStarsInSystemRow
	for rows.Next() {
		var i ReadAllStarsInSystemRow
		if err := rows.Scan(
			&i.ID,
			&i.X,
			&i.Y,
			&i.Z,
			&i.Sequence,
			&i.StarName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readStarByID = `-- name: ReadStarByID :one
select systems.x, systems.y, systems.z, star_name, stars.sequence
from stars,
     systems
where stars.id = ?1
  and systems.id = stars.system_id
`

type ReadStarByIDRow struct {
	X        int64
	Y        int64
	Z        int64
	StarName string
	Sequence string
}

// ReadStarByID returns a star by its ID.
func (q *Queries) ReadStarByID(ctx context.Context, starID int64) (ReadStarByIDRow, error) {
	row := q.db.QueryRowContext(ctx, readStarByID, starID)
	var i ReadStarByIDRow
	err := row.Scan(
		&i.X,
		&i.Y,
		&i.Z,
		&i.StarName,
		&i.Sequence,
	)
	return i, err
}

const readStarSurvey = `-- name: ReadStarSurvey :many
select orbits.id         as orbit_id,
       orbits.orbit_no   as orbit_no,
       orbits.kind       as orbit_kind,
       deposits.kind     as deposit_kind,
       sum(deposits.qty) as quantity
from stars,
     orbits,
     deposits
where stars.id = ?1
  and orbits.star_id = stars.id
  and deposits.orbit_id = orbits.id
group by orbits.id, orbits.orbit_no, orbits.kind, orbits.kind, deposits.kind
order by orbits.orbit_no, deposits.kind
`

type ReadStarSurveyRow struct {
	OrbitID     int64
	OrbitNo     int64
	OrbitKind   string
	DepositKind string
	Quantity    sql.NullFloat64
}

// ReadStarSurvey reads the star survey data for star in a game.
func (q *Queries) ReadStarSurvey(ctx context.Context, starID int64) ([]ReadStarSurveyRow, error) {
	rows, err := q.db.QueryContext(ctx, readStarSurvey, starID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadStarSurveyRow
	for rows.Next() {
		var i ReadStarSurveyRow
		if err := rows.Scan(
			&i.OrbitID,
			&i.OrbitNo,
			&i.OrbitKind,
			&i.DepositKind,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
