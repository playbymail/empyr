// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: deposits.sql

package sqlc

import (
	"context"
)

const createDeposit = `-- name: CreateDeposit :one
INSERT INTO deposits (planet_id, deposit_no, kind, remaining_qty, yield_pct)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id
`

type CreateDepositParams struct {
	PlanetID     int64
	DepositNo    int64
	Kind         string
	RemainingQty int64
	YieldPct     int64
}

// CreateDeposit creates a new deposit on an existing planet.
func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createDeposit,
		arg.PlanetID,
		arg.DepositNo,
		arg.Kind,
		arg.RemainingQty,
		arg.YieldPct,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteEmptyDeposits = `-- name: DeleteEmptyDeposits :exec
DELETE
FROM deposits
WHERE kind = 'NONE'
`

// DeleteEmptyDeposits deletes all empty deposits.
func (q *Queries) DeleteEmptyDeposits(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteEmptyDeposits)
	return err
}
