// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: deposits.sql

package sqlc

import (
	"context"
)

const createDeposit = `-- name: CreateDeposit :one
INSERT INTO deposits (system_id, star_id, orbit_id, deposit_no, kind, qty, yield_pct)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
RETURNING id
`

type CreateDepositParams struct {
	SystemID  int64
	StarID    int64
	OrbitID   int64
	DepositNo int64
	Kind      string
	Qty       int64
	YieldPct  int64
}

// CreateDeposit creates a new deposit on an existing orbit.
func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createDeposit,
		arg.SystemID,
		arg.StarID,
		arg.OrbitID,
		arg.DepositNo,
		arg.Kind,
		arg.Qty,
		arg.YieldPct,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readDepositByOrbitDepositNo = `-- name: ReadDepositByOrbitDepositNo :one
SELECT id, deposit_no, kind, qty, yield_pct
FROM deposits
WHERE orbit_id = ?1
  AND deposit_no = ?2
`

type ReadDepositByOrbitDepositNoParams struct {
	OrbitID   int64
	DepositNo int64
}

type ReadDepositByOrbitDepositNoRow struct {
	ID        int64
	DepositNo int64
	Kind      string
	Qty       int64
	YieldPct  int64
}

// ReadDepositByOrbitDepositNo reads a deposit by its deposit number and orbit ID.
func (q *Queries) ReadDepositByOrbitDepositNo(ctx context.Context, arg ReadDepositByOrbitDepositNoParams) (ReadDepositByOrbitDepositNoRow, error) {
	row := q.db.QueryRowContext(ctx, readDepositByOrbitDepositNo, arg.OrbitID, arg.DepositNo)
	var i ReadDepositByOrbitDepositNoRow
	err := row.Scan(
		&i.ID,
		&i.DepositNo,
		&i.Kind,
		&i.Qty,
		&i.YieldPct,
	)
	return i, err
}

const readDepositsByOrbit = `-- name: ReadDepositsByOrbit :many
SELECT id, deposit_no, kind, qty, yield_pct
FROM deposits
WHERE orbit_id = ?1
ORDER BY deposit_no
`

type ReadDepositsByOrbitRow struct {
	ID        int64
	DepositNo int64
	Kind      string
	Qty       int64
	YieldPct  int64
}

// ReadDepositsByOrbit returns a list of all deposits on a orbit.
func (q *Queries) ReadDepositsByOrbit(ctx context.Context, orbitID int64) ([]ReadDepositsByOrbitRow, error) {
	rows, err := q.db.QueryContext(ctx, readDepositsByOrbit, orbitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadDepositsByOrbitRow
	for rows.Next() {
		var i ReadDepositsByOrbitRow
		if err := rows.Scan(
			&i.ID,
			&i.DepositNo,
			&i.Kind,
			&i.Qty,
			&i.YieldPct,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
