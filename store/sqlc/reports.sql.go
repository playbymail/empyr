// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: reports.sql

package sqlc

import (
	"context"
)

const createReport = `-- name: CreateReport :one
INSERT INTO reports (sorc_id, turn_no)
VALUES (?1, ?2)
RETURNING id
`

type CreateReportParams struct {
	SorcID int64
	TurnNo int64
}

// CreateReport creates a new report for the given Sorc.
func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createReport, arg.SorcID, arg.TurnNo)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createReportProductionInput = `-- name: CreateReportProductionInput :one
INSERT INTO report_production_inputs (report_id, category, fuel, gold, metals, non_metals)
VALUES (?1, ?2, ?3, ?4, ?5, ?6)
RETURNING id
`

type CreateReportProductionInputParams struct {
	ReportID  int64
	Category  string
	Fuel      int64
	Gold      int64
	Metals    int64
	NonMetals int64
}

// CreateReportProductionInput adds a production input to the given report.
func (q *Queries) CreateReportProductionInput(ctx context.Context, arg CreateReportProductionInputParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createReportProductionInput,
		arg.ReportID,
		arg.Category,
		arg.Fuel,
		arg.Gold,
		arg.Metals,
		arg.NonMetals,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createReportProductionOutput = `-- name: CreateReportProductionOutput :one
INSERT INTO report_production_outputs (report_id, category, unit_cd, tech_level, farmed, mined, manufactured)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
RETURNING id
`

type CreateReportProductionOutputParams struct {
	ReportID     int64
	Category     string
	UnitCd       string
	TechLevel    int64
	Farmed       int64
	Mined        int64
	Manufactured int64
}

// CreateReportProductionOutput adds a production output to the given report.
func (q *Queries) CreateReportProductionOutput(ctx context.Context, arg CreateReportProductionOutputParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createReportProductionOutput,
		arg.ReportID,
		arg.Category,
		arg.UnitCd,
		arg.TechLevel,
		arg.Farmed,
		arg.Mined,
		arg.Manufactured,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readReportProductionInputs = `-- name: ReadReportProductionInputs :many
SELECT category, fuel, gold, metals, non_metals
FROM reports,
     report_production_inputs
WHERE reports.sorc_id = ?1
  AND reports.turn_no = ?2
  AND report_id = reports.id
ORDER BY category
`

type ReadReportProductionInputsParams struct {
	SorcID int64
	TurnNo int64
}

type ReadReportProductionInputsRow struct {
	Category  string
	Fuel      int64
	Gold      int64
	Metals    int64
	NonMetals int64
}

// ReadReportProductionInputs returns a list of production inputs for a sorc and turn.
func (q *Queries) ReadReportProductionInputs(ctx context.Context, arg ReadReportProductionInputsParams) ([]ReadReportProductionInputsRow, error) {
	rows, err := q.db.QueryContext(ctx, readReportProductionInputs, arg.SorcID, arg.TurnNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadReportProductionInputsRow
	for rows.Next() {
		var i ReadReportProductionInputsRow
		if err := rows.Scan(
			&i.Category,
			&i.Fuel,
			&i.Gold,
			&i.Metals,
			&i.NonMetals,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readReportProductionOutputs = `-- name: ReadReportProductionOutputs :many
SELECT category, farmed, mined, manufactured
FROM reports,
     report_production_outputs
WHERE reports.sorc_id = ?1
  AND reports.turn_no = ?2
  AND report_id = reports.id
ORDER BY unit_cd, tech_level
`

type ReadReportProductionOutputsParams struct {
	SorcID int64
	TurnNo int64
}

type ReadReportProductionOutputsRow struct {
	Category     string
	Farmed       int64
	Mined        int64
	Manufactured int64
}

// ReadReportProductionOutputs returns a list of production outputs for a sorc and turn.
func (q *Queries) ReadReportProductionOutputs(ctx context.Context, arg ReadReportProductionOutputsParams) ([]ReadReportProductionOutputsRow, error) {
	rows, err := q.db.QueryContext(ctx, readReportProductionOutputs, arg.SorcID, arg.TurnNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadReportProductionOutputsRow
	for rows.Next() {
		var i ReadReportProductionOutputsRow
		if err := rows.Scan(
			&i.Category,
			&i.Farmed,
			&i.Mined,
			&i.Manufactured,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
