// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: planets.sql

package sqlc

import (
	"context"
)

const createPlanet = `-- name: CreatePlanet :one

INSERT INTO planets (orbit_id, kind, habitability)
VALUES (?1, ?2, ?3)
RETURNING id
`

type CreatePlanetParams struct {
	OrbitID      int64
	Kind         string
	Habitability int64
}

//	Copyright (c) 2025 Michael D Henderson. All rights reserved.
//
// CreatePlanet creates a new planet.
func (q *Queries) CreatePlanet(ctx context.Context, arg CreatePlanetParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPlanet, arg.OrbitID, arg.Kind, arg.Habitability)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const readPlanetSurvey = `-- name: ReadPlanetSurvey :many
SELECT orbits.orbit_no        as orbit_no,
       planet_codes.name      as planet_kind,
       deposits.deposit_no    as deposit_no,
       unit_codes.name        as deposit_kind,
       deposits.remaining_qty as deposit_qty,
       deposits.yield_pct     as yield_pct
FROM orbits,
     planets,
     deposits,
     planet_codes,
     unit_codes
WHERE orbits.id = planets.orbit_id
  AND planets.id = ?1
  AND deposits.planet_id = planets.id
  AND planet_codes.code = planets.kind
  AND unit_codes.code = deposits.kind
ORDER BY deposits.deposit_no
`

type ReadPlanetSurveyRow struct {
	OrbitNo     int64
	PlanetKind  string
	DepositNo   int64
	DepositKind string
	DepositQty  int64
	YieldPct    int64
}

// ReadPlanetSurvey reads the planet survey data for a game.
func (q *Queries) ReadPlanetSurvey(ctx context.Context, planetID int64) ([]ReadPlanetSurveyRow, error) {
	rows, err := q.db.QueryContext(ctx, readPlanetSurvey, planetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadPlanetSurveyRow
	for rows.Next() {
		var i ReadPlanetSurveyRow
		if err := rows.Scan(
			&i.OrbitNo,
			&i.PlanetKind,
			&i.DepositNo,
			&i.DepositKind,
			&i.DepositQty,
			&i.YieldPct,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
